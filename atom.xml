<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mikito</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://115.159.44.202/"/>
  <updated>2017-11-10T07:52:17.320Z</updated>
  <id>http://115.159.44.202/</id>
  
  <author>
    <name>Mikito</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Machine Learning 第三周</title>
    <link href="http://115.159.44.202/2017/11/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Andrew/Machine%20Learning%20%E7%AC%AC%E4%B8%89%E5%91%A8/"/>
    <id>http://115.159.44.202/2017/11/10/机器学习/Andrew/Machine Learning 第三周/</id>
    <published>2017-11-10T06:50:48.000Z</published>
    <updated>2017-11-10T07:52:17.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h1><h1 id="PROGRAMMING"><a href="#PROGRAMMING" class="headerlink" title="PROGRAMMING"></a>PROGRAMMING</h1><h2 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h2><h3 id="Visualizing-the-data"><a href="#Visualizing-the-data" class="headerlink" title="Visualizing the data"></a>Visualizing the data</h3><p>&emsp;&emsp;这一段可以自己写，但是在pdf中也有直接的代码可以添加在plotdata.m中：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% Find Indices of Positive and Negative Examples</span></div><div class="line">pos = <span class="built_in">find</span>(y==<span class="number">1</span>); neg = <span class="built_in">find</span>(y == <span class="number">0</span>);</div><div class="line"><span class="comment">% Plot Examples</span></div><div class="line">plot(X(pos, <span class="number">1</span>), X(pos, <span class="number">2</span>), <span class="string">'k+'</span>,<span class="string">'LineWidth'</span>, <span class="number">2</span>, <span class="string">'MarkerSize'</span>, <span class="number">7</span>);</div><div class="line">plot(X(neg, <span class="number">1</span>), X(neg, <span class="number">2</span>), <span class="string">'ko'</span>, <span class="string">'MarkerFaceColor'</span>, <span class="string">'y'</span>, <span class="string">'MarkerSize'</span>, <span class="number">7</span>);</div></pre></td></tr></table></figure></p><h3 id="Sigmoid-Function"><a href="#Sigmoid-Function" class="headerlink" title="Sigmoid Function"></a>Sigmoid Function</h3><p>&emsp;&emsp;根据公式可以直接求出。注意是点除，不是直接的相除。<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g=<span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-z));</div></pre></td></tr></table></figure></p><h3 id="Cost-function-and-gradient"><a href="#Cost-function-and-gradient" class="headerlink" title="Cost function and gradient"></a>Cost function and gradient</h3><p>&emsp;&emsp;根据公式，在costFunction.m中添加以下代码：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">J=<span class="number">1</span>/m*(-y'*<span class="built_in">log</span>(sigmoid(X*theta))-(<span class="number">1</span>-y)'*<span class="built_in">log</span>(<span class="number">1</span>-sigmoid(X*theta)));</div><div class="line">grad=<span class="number">1</span>/m*((sigmoid(X*theta)-y)'*X);</div></pre></td></tr></table></figure></p><h3 id="Evaluating-logistic-regression"><a href="#Evaluating-logistic-regression" class="headerlink" title="Evaluating logistic regression"></a>Evaluating logistic regression</h3><p>&emsp;&emsp;这个就是根据结果判断是0还是1了，在predict.m中添加以下代码：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">h=sigmoid(X*theta);</div><div class="line">p(<span class="built_in">find</span>(h&lt;<span class="number">0.5</span>))=<span class="number">0</span>;</div><div class="line">p(<span class="built_in">find</span>(h&gt;=<span class="number">0.5</span>))=<span class="number">1</span>;</div></pre></td></tr></table></figure></p><h2 id="Regularized-logistic-regression"><a href="#Regularized-logistic-regression" class="headerlink" title="Regularized logistic regression"></a>Regularized logistic regression</h2><h3 id="Cost-function-and-gradient-1"><a href="#Cost-function-and-gradient-1" class="headerlink" title="Cost function and gradient"></a>Cost function and gradient</h3><p>&emsp;&emsp;在原先的基础上添加一个正则项，matlab下标从1开始，这个问题让我找了半天的bug，在costFunctionReg.m中添加以下代码：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">J=<span class="number">1</span>/m*(-y'*<span class="built_in">log</span>(sigmoid(X*theta))-(<span class="number">1</span>-y)'*<span class="built_in">log</span>(<span class="number">1</span>-sigmoid(X*theta)))+lambda/<span class="number">2</span>/m*(theta(<span class="number">2</span>:<span class="keyword">end</span>)'*theta(<span class="number">2</span>:<span class="keyword">end</span>));</div><div class="line">grad=<span class="number">1</span>/m*((sigmoid(X*theta)-y)'*X);</div><div class="line">grad(<span class="number">2</span>:<span class="keyword">end</span>)=grad(<span class="number">2</span>:<span class="keyword">end</span>)+lambda/m*theta(<span class="number">2</span>:<span class="keyword">end</span>)';</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Week-3&quot;&gt;&lt;a href=&quot;#Week-3&quot; class=&quot;headerlink&quot; title=&quot;Week 3&quot;&gt;&lt;/a&gt;Week 3&lt;/h1&gt;&lt;h1 id=&quot;PROGRAMMING&quot;&gt;&lt;a href=&quot;#PROGRAMMING&quot; class=&quot;header
      
    
    </summary>
    
      <category term="机器学习" scheme="http://115.159.44.202/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="matlab" scheme="http://115.159.44.202/tags/matlab/"/>
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Coursera" scheme="http://115.159.44.202/tags/Coursera/"/>
    
  </entry>
  
  <entry>
    <title>考虑平局的投票分类器</title>
    <link href="http://115.159.44.202/2017/10/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E6%95%B0%E6%8A%95%E7%A5%A8%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>http://115.159.44.202/2017/10/31/机器学习/多数投票分类器/</id>
    <published>2017-10-31T04:33:29.000Z</published>
    <updated>2017-10-31T08:27:47.395Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在基础分类器中，除了最近邻的方法外，投票也是常用的一种方法。投票的原理是：每一个部分拥有一票或多票，根据一定的规则投给某一个类别，获得最多票数的类别是最终得到的类别。</p><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><p>&emsp;&emsp;很多matlab的实现投票分类器的代码如下：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a=<span class="number">1</span>:c; <span class="comment">% c是类别数</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:num</div><div class="line">   h(<span class="built_in">i</span>,:)=hist(index(<span class="built_in">i</span>,:),a); <span class="comment">% index是一个矩阵,每一个位置都有一个数字，在0到c之间</span></div><div class="line"><span class="keyword">end</span></div><div class="line">[~,ind]=max(h,[],<span class="number">2</span>);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;我一开始也是使用这种方法做的分类，但是老师问我，如果是2：2怎么办呢？在我的实验中，我已知的是一个距离矩阵，共有length(X_tst)行，length(X_trn) <em> num列，即有多少个测试样本就有多少行，而训练样本数 </em> 分块数就是列数。在这种情况下，当分块数太小时很有可能出现平局的局面，而以上的算法并没有考虑到这个局面，它只是在平局时简单粗暴地选择了较小的序号。</p><h2 id="考虑到平局的算法"><a href="#考虑到平局的算法" class="headerlink" title="考虑到平局的算法"></a>考虑到平局的算法</h2><p>&emsp;&emsp;这个分类算法被我用于单样本人脸识别，因此代码可能不具有通用性，但是思想方法大体差别不大。</p><blockquote><p>输入：距离矩阵D，共有length(X_tst)行，length(X_trn) * num列。前num列存放各个测试样本到训练图片1的num块的距离。<br>输出：分类得到的结果ind<br>流程：</p><ol><li>对第$i$块，得到距离矩阵dt，表示测试样本到所有训练样本第$i$块的距离。从每个dt中得到一个最小距离向量和对应的索引向量。</li><li>将所有的距离向量连起来得到矩阵mindis，将所有的索引合起来得到矩阵index。</li><li>对每一块，用hist进行统计，并连起来。</li><li>求出每块中出现的最大次数times和对应的序号ind。</li><li>用sum和bsxfun函数一起判断有没有平局的出现。</li><li>对于出现平局的样本，找到平局中序号对应的最小距离，谁小测试样本就是那一类的。</li></ol></blockquote><p>&emsp;&emsp;比起使用for循环，matlab中更提倡矩阵的运算，所以一部分我是直接使用矩阵进行运算的。但是在处理平局时，我没有找到合适的函数。使用了两层for循环，对每一个测试样本，将距离排序，依次使用最小的距离，并判断最小的距离对应的序号是否在平局的序号中，如果不是再取第二小的，依次递推。</p><h2 id="matlab代码"><a href="#matlab代码" class="headerlink" title="matlab代码"></a>matlab代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">c=max(Y_trn); <span class="comment">%类别数</span></div><div class="line">num=<span class="built_in">size</span>(d,<span class="number">2</span>)/c; <span class="comment">%每个图像有多少块</span></div><div class="line">a=<span class="number">1</span>:c;</div><div class="line">index=[];</div><div class="line">mindis=[];</div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:num</div><div class="line">   dt=[];</div><div class="line">   <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:c</div><div class="line">      dt=[dt,d(:,num*(j<span class="number">-1</span>)+i)];</div><div class="line">   <span class="keyword">end</span></div><div class="line">   [dis,ind]=min(dt,[],<span class="number">2</span>);</div><div class="line">   mindis=[mindis,dis];</div><div class="line">   index=[index,ind];</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(Y_tst)</div><div class="line">   h(<span class="built_in">i</span>,:)=hist(index(<span class="built_in">i</span>,:),a);</div><div class="line"><span class="keyword">end</span></div><div class="line">[times,ind]=max(h,[],<span class="number">2</span>); <span class="comment">% times出现的最大次数， ind：出现的最大次数对应的序号</span></div><div class="line">bf=<span class="built_in">bsxfun</span>(@eq,h,times);</div><div class="line">s=sum(bf,<span class="number">2</span>);<span class="comment">% 最大次数出现了几次</span></div><div class="line">fd=<span class="built_in">find</span>(s~=<span class="number">1</span>); <span class="comment">% 找到出现平局的情况</span></div><div class="line">[~, id]=sort(mindis,<span class="number">2</span>);</div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(fd)</div><div class="line">   <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:num</div><div class="line">      <span class="keyword">if</span> bf(fd(<span class="built_in">i</span>),index(fd(<span class="built_in">i</span>),id(fd(<span class="built_in">i</span>),<span class="built_in">j</span>)))==<span class="number">1</span></div><div class="line">         ind(fd(<span class="built_in">i</span>))=index(fd(<span class="built_in">i</span>),id(fd(<span class="built_in">i</span>),<span class="built_in">j</span>));</div><div class="line">         <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">end</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在基础分类器中，除了最近邻的方法外，投票也是常用的一种方法。投票的原理是：每一个部分拥有一票或多票，根据一定的规则投给某一个类别，获得最多票数的类别是最终得到的类别。&lt;/p&gt;
&lt;h2 id=&quot;基础算法&quot;&gt;&lt;a href=&quot;#基础算法&quot; class=&quot;
      
    
    </summary>
    
      <category term="机器学习" scheme="http://115.159.44.202/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="matlab" scheme="http://115.159.44.202/tags/matlab/"/>
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>《统计学习方法》之k近邻法</title>
    <link href="http://115.159.44.202/2017/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/%E3%80%8A%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E3%80%8B%E4%B9%8Bk%E8%BF%91%E9%82%BB%E6%B3%95/"/>
    <id>http://115.159.44.202/2017/10/22/机器学习/统计学习方法/《统计学习方法》之k近邻法/</id>
    <published>2017-10-22T06:10:18.000Z</published>
    <updated>2017-11-04T12:07:46.131Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;相似度查询有两种方法：<br>&emsp;1. 范围查询，给定阈值。<br>&emsp;2. k近邻查询，给定查询点和k。<br>&emsp;&emsp;k近邻法是一种基本分类与回归的方法。其基本思想是：一个样本的k个最相近的样本大多属于某一个类，则该样本也属于这个类。因此，k近邻算法不具有显式的学习过程。k值的选择、距离度量和分类决策规则是k近邻方法的三个基本要素。</p><h2 id="k近邻算法"><a href="#k近邻算法" class="headerlink" title="k近邻算法"></a>k近邻算法</h2><blockquote><p>k近邻算法流程<br>输入：训练数据集$T={(x_1,y_1),(x_2,y_2),…,(x_N,y_N)}$，其中，$x \in X \subseteq R^n$为实例的特征向量，$y_i\in Y={c_1,c_2,…,c_K}$为实例的类别，$i=1,2,…,N$，实例特征向量$x$。<br>输出：实例$x$所属的类$y$。<br>(1) 根据给定的距离度量，在训练集$T$中找出与$x$最近的$k$个点，涵盖这$k$个点的$x$邻域记作$N_k(x)$。<br>(2) 在$N_k(x)$中根据分类决策规则，决定$x$的类别$y$：<br>$y=\arg \max \limits_{c_j}{\sum \limits_{x_i\in N_k(x)}I(y_i=c_j)}, i=1,2,…,N; j=1,2,…,K $<br>其中$I$为指示函数，即当$y_i=c_j$时，$I$为1，否则为0。</p></blockquote><p>&emsp;&emsp;k近邻的特殊情况是当$k=1$时，此算法被称为最近邻算法。</p><h2 id="k近邻模型"><a href="#k近邻模型" class="headerlink" title="k近邻模型"></a>k近邻模型</h2><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>&emsp;&emsp;特征空间中，对于每个训练实例点$x_i$，距离该点比其他店更近的所有点组成的一个区域，叫做单元。k近邻算法就是利用训练数据集对特征向量空间进行划分。</p><h3 id="距离度量"><a href="#距离度量" class="headerlink" title="距离度量"></a>距离度量</h3><p>&emsp;&emsp;距离度量公式定义为：<br>$$L_p(x_i,x_j)=(\sum_{l=1}^{n}|x_i^{(l)}-x_i^{(l)}|^p)^\frac{1}{p}$$<br>其中$p\geq 1$<br>&emsp;&emsp;当$p=1$时，可以得到曼哈顿距离：$L_1(x_i,x_j)=\sum_{l=1}^{n}|x_i^{(l)}-x_i^{(l)}|$<br>&emsp;&emsp;当$p=2$时，可以得到欧式距离：$L_2(x_i,x_j)=(\sum_{l=1}^{n}|x_i^{(l)}-x_i^{(l)}|^2)^\frac{1}{2}$</p><h3 id="k值的选择"><a href="#k值的选择" class="headerlink" title="k值的选择"></a>k值的选择</h3><p>&emsp;&emsp;k值的选择对算法有很大的影响。k值的减小意味着整体模型变得复杂，容易发生过拟合。如果选择较大的k值，可以减少学习的估计误差，但是学习的近似误差会增加。在应用中，k值一般取一个比较小的值。通常采用交叉验证法来选取最合适的k值。</p><h3 id="分类决策规则"><a href="#分类决策规则" class="headerlink" title="分类决策规则"></a>分类决策规则</h3><p>&emsp;&emsp;k近邻法中的分类决策规则往往是多数表决，即由输入实例的k个近邻的训练实例中的多数类决定输入实例的类。这种决策规则等价于经验风险最小化。</p><h2 id="k近邻法的实现：kd树"><a href="#k近邻法的实现：kd树" class="headerlink" title="k近邻法的实现：kd树"></a>k近邻法的实现：kd树</h2><p>&emsp;&emsp;我们在进行特征匹配是，通常采用两种方法：线性扫描和构建数据索引，而使用构建数据索引时，在无重叠时可采用kd树，重叠时可采用R树。<br>&emsp;&emsp;kd树的全称是k-dimension tree，可以用于k近邻的寻找。</p><h3 id="构造kd树"><a href="#构造kd树" class="headerlink" title="构造kd树"></a>构造kd树</h3><p>&emsp;&emsp;kd树是一棵二叉树，也是一颗空间划分树（空间划分树：将整个空间划分为几个特定的部分，然后再特定的部分进行搜索）。</p><blockquote><p>构造平衡kd树流程<br>输入：$k$维空间数据集$T={x_1,x_2,…,x_N}$，其中$x_i=(x_i^{(1)},x_i^{(2)},…,x_i^{(k)})^T，i=1,2,…,N$<br>输出：kd树<br>算法流程：<br>(1) 开始：构造根结点，根结点对应于包含$T$的$k$维空间的超矩形区域。<br>&emsp;选择$x^{(1)}$为坐标轴，将$T$中所有实例的$x^{(1)}$的中位数（奇数个：取中间，偶数个：中间偏大）为切分点，将根结点对应的超矩形区域切分成两个子区域。左子结点对应于小于切分点的子区域，有子结点对应于大于切分点的子区域。落在切分超平面上的实例点保存在根节点。<br>(2) 重复：对深度为$j$的切分点，选择$x^{(l)}$为切分的坐标轴，其中$l=j(modk)+1$（从1到$k$循环取），重复以上操作。<br>(3) 直到两个子区域没有实例点存在时停止。从而形成kd树的区域划分。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;相似度查询有两种方法：&lt;br&gt;&amp;emsp;1. 范围查询，给定阈值。&lt;br&gt;&amp;emsp;2. k近邻查询，给定查询点和k。&lt;br&gt;&amp;emsp;&amp;emsp;k近邻法是一种基本分类与回归的方法。其基本思想是：一个样本的k个最相近的样本大多属于某一个类，则
      
    
    </summary>
    
      <category term="《统计学习方法》" scheme="http://115.159.44.202/categories/%E3%80%8A%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E3%80%8B/"/>
    
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="《统计学习方法》" scheme="http://115.159.44.202/tags/%E3%80%8A%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Extended local binary patterns for face recognition》阅读笔记</title>
    <link href="http://115.159.44.202/2017/10/18/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/%E3%80%8AExtended%20local%20binary%20patterns%20for%20face%20recognition%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://115.159.44.202/2017/10/18/论文阅读/人脸识别/《Extended local binary patterns for face recognition》阅读笔记/</id>
    <published>2017-10-18T07:31:29.000Z</published>
    <updated>2017-10-18T07:55:26.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Brief-Introduction"><a href="#Brief-Introduction" class="headerlink" title="Brief Introduction"></a>Brief Introduction</h2><p>&emsp;&emsp;在原先的基础上提出了三种新的LBP算子。（后面具体的没有看）</p><h2 id="Proposed-Method"><a href="#Proposed-Method" class="headerlink" title="Proposed Method"></a>Proposed Method</h2><p>&emsp;&emsp; They propose a novel method based on PCA image reconstruction and LDA for face recognition. Our proposed methods effectively combine the advantages of PCA, LDA, and SVM.</p><h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><ol><li>Introduction<br>&emsp;1.1 人脸识别现状（十分热门+提出很多算法+缺点（有挑战性））<br>&emsp;1.2 人脸识别的关键问题（特征提取和分类器）+特征提取的重要性和挑战<br>&emsp;1.3 全局特征和局部特征+优缺点<br>&emsp;1.4 LBP的优点和缺点<br>&emsp;1.5 本文算法和主要贡献</li><li>Related work</li><li>Extended LBP descriptors<br>&emsp;3.1 Angular-differences based descriptors<br>&emsp;3.2 Radial-differences based descriptors<br>&emsp;3.3 Statistical distribution examination of patterns</li><li>Face representation</li><li>Experiments</li><li>Conclusions</li></ol><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Brief-Introduction&quot;&gt;&lt;a href=&quot;#Brief-Introduction&quot; class=&quot;headerlink&quot; title=&quot;Brief Introduction&quot;&gt;&lt;/a&gt;Brief Introduction&lt;/h2&gt;&lt;p&gt;&amp;emsp;
      
    
    </summary>
    
      <category term="论文阅读" scheme="http://115.159.44.202/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人脸识别" scheme="http://115.159.44.202/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
      <category term="论文阅读" scheme="http://115.159.44.202/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
      <category term="特征提取" scheme="http://115.159.44.202/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
      <category term="局部二值模式" scheme="http://115.159.44.202/tags/%E5%B1%80%E9%83%A8%E4%BA%8C%E5%80%BC%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="局部描述算子" scheme="http://115.159.44.202/tags/%E5%B1%80%E9%83%A8%E6%8F%8F%E8%BF%B0%E7%AE%97%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>《A two-phase face recognition method in frequency domain》阅读笔记</title>
    <link href="http://115.159.44.202/2017/10/18/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/%E3%80%8AA%20two-phase%20face%20recognition%20method%20in%20frequency%20domain%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://115.159.44.202/2017/10/18/论文阅读/人脸识别/《A two-phase face recognition method in frequency domain》阅读笔记/</id>
    <published>2017-10-18T06:30:29.000Z</published>
    <updated>2017-10-18T07:05:30.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Brief-Introduction"><a href="#Brief-Introduction" class="headerlink" title="Brief Introduction"></a>Brief Introduction</h2><p>&emsp;&emsp;对图像进行DCT和DFT特征提取+（第一项）先求得k个近邻+将图像分成K个图片的融合，并求得每张图片对应的系数+计算测试样本和每类之间的距离</p><h2 id="Proposed-Method"><a href="#Proposed-Method" class="headerlink" title="Proposed Method"></a>Proposed Method</h2><p>&emsp;&emsp; They proposed a two-phase representation method that uses DCT coefficients or DFT amplitude spectra for face recognition. It is more efficient than the naïve 1 norm-based sparse representation method.</p><h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><ol><li>Introduction<br>&emsp;1.1 人脸识别价值+基于变换域的方法<br>&emsp;1.2 基于DCT和DFT的算法的发展和分类+基于变换域的方法的优点<br>&emsp;&emsp;1.2.1 使用一部分DCT系数和DFT幅度谱<br>&emsp;&emsp;1.2.2 使用全部DCT系数和DFT幅度谱<br>&emsp;1.3 新的二相分类方法算法+优点<br>&emsp;1.4 本文算法流程<br>&emsp;1.5 文章组织结构</li><li>The Proposed algorithm</li><li>Experimental results<br>&emsp;3.1 Performance comparison<br>&emsp;3.2 Number of DCT coefficients and DFT amplitude spectra</li><li>Conclusions</li></ol><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><ol><li>离散余弦变换：discrete cosine transform</li><li>离散傅立叶变换：discrete Fourier transform</li><li>幅度谱：amplitude spectra</li><li>变换域：transform domain</li><li>整体的：holistic</li><li>误差：deviation </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Brief-Introduction&quot;&gt;&lt;a href=&quot;#Brief-Introduction&quot; class=&quot;headerlink&quot; title=&quot;Brief Introduction&quot;&gt;&lt;/a&gt;Brief Introduction&lt;/h2&gt;&lt;p&gt;&amp;emsp;
      
    
    </summary>
    
      <category term="论文阅读" scheme="http://115.159.44.202/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人脸识别" scheme="http://115.159.44.202/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
      <category term="论文阅读" scheme="http://115.159.44.202/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
      <category term="离散余弦变换" scheme="http://115.159.44.202/tags/%E7%A6%BB%E6%95%A3%E4%BD%99%E5%BC%A6%E5%8F%98%E6%8D%A2/"/>
    
      <category term="离散傅立叶变换" scheme="http://115.159.44.202/tags/%E7%A6%BB%E6%95%A3%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
    
      <category term="无监督学习" scheme="http://115.159.44.202/tags/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>《Face recognition based on PCA image reconstruction and LDA》阅读笔记</title>
    <link href="http://115.159.44.202/2017/10/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/%E3%80%8AFace%20recognition%20based%20on%20PCA%20image%20reconstruction%20and%20LDA%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://115.159.44.202/2017/10/17/论文阅读/人脸识别/《Face recognition based on PCA image reconstruction and LDA》阅读笔记/</id>
    <published>2017-10-17T11:24:29.000Z</published>
    <updated>2017-10-18T06:30:07.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Brief-Introduction"><a href="#Brief-Introduction" class="headerlink" title="Brief Introduction"></a>Brief Introduction</h2><p>&emsp;&emsp;预处理（直方图均衡化+PCA图像重建（新）+LDA+SVM</p><h2 id="Proposed-Method"><a href="#Proposed-Method" class="headerlink" title="Proposed Method"></a>Proposed Method</h2><p>&emsp;&emsp; They propose a novel method based on PCA image reconstruction and LDA for face recognition. Our proposed methods effectively combine the advantages of PCA, LDA, and SVM.</p><h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><ol><li>Introduction<br>&emsp;1.1 人脸识别现状（概念+价值+十分热门+有挑战性）<br>&emsp;1.2 人脸识别的关键问题（特征提取和分类器）<br>&emsp;&emsp;1.2.1 PCA（由来+发展）<br>&emsp;&emsp;1.2.2 LDA（影响+思想+缺点+发展）<br>&emsp;1.3 本文算法流程+优点</li><li>Related algorithms<br>&emsp;2.1 Principal component analysis(PCA)<br>&emsp;2.2 Linear Discriminant Analysis(LDA)<br>&emsp;2.3 Support vector machine (SVM)</li><li>Face recognition based on PCA image reconstruction and LDA<br>&emsp;3.1 Image preprocessing(histogram equalization)<br>&emsp;3.2 PCA image reconstruction<br>&emsp;3.3 PCA image reconstruction and LDA for face recognition（算法流程）</li><li>Experimental results and discussion<br>&emsp;4.1 Experiments on ORL database<br>&emsp;4.2 Discussion</li><li>Conclusions</li></ol><h2 id="Sentences"><a href="#Sentences" class="headerlink" title="Sentences"></a>Sentences</h2><ol><li>Face recognition is a technology of using computer to analyze the face images and extract the features for recognizing the identity of the target.</li><li>The research of face recognition has great theoretical value, involving subjects of pattern recognition, image processing, computer vision, machine learning, physiology, and so on, and it also has a high correlation with other biometrics recognition methods. </li><li>In recent years, face recognition is one of the most active and challenging problems in the field of pattern recognition and artificial intelligence.</li></ol><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><ol><li>直方图均衡化：histogram equalization</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Brief-Introduction&quot;&gt;&lt;a href=&quot;#Brief-Introduction&quot; class=&quot;headerlink&quot; title=&quot;Brief Introduction&quot;&gt;&lt;/a&gt;Brief Introduction&lt;/h2&gt;&lt;p&gt;&amp;emsp;
      
    
    </summary>
    
      <category term="论文阅读" scheme="http://115.159.44.202/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人脸识别" scheme="http://115.159.44.202/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
      <category term="论文阅读" scheme="http://115.159.44.202/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
      <category term="无监督学习" scheme="http://115.159.44.202/tags/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="独立成分分析" scheme="http://115.159.44.202/tags/%E7%8B%AC%E7%AB%8B%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/"/>
    
      <category term="主成分分析" scheme="http://115.159.44.202/tags/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>《LBP 和 HOG 的分层特征融合的人脸识别》阅读笔记</title>
    <link href="http://115.159.44.202/2017/10/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/%E3%80%8ALBP%20%E5%92%8C%20HOG%20%E7%9A%84%E5%88%86%E5%B1%82%E7%89%B9%E5%BE%81%E8%9E%8D%E5%90%88%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://115.159.44.202/2017/10/17/论文阅读/人脸识别/《LBP 和 HOG 的分层特征融合的人脸识别》阅读笔记/</id>
    <published>2017-10-17T08:07:29.000Z</published>
    <updated>2017-10-17T11:33:33.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;使用LBP和HOG两种局部特征，并采用分层的思想，将纹理特征和边界特征融合。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>&emsp;&emsp;万源和李欢欢等提出了将LBP 算子和 HOG 算子进行融合, 利用分层的思想，实现局部和整体特征融合的人脸识别方法。对人脸图像进行分块提取LBP 和 HOG 特征能够反映人脸的局部特征, 进而考虑整体的 LBP 和 HOG 特征又能反映人脸的整体特征, 最终实现全局和局部特征的融合. </p><h2 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h2><ol><li>背景介绍<br>&emsp;1.1 人脸识别方法分类。<br>&emsp;1.2 对本文中使用的第二种算法的现状（后人的改进）进行详细介绍。<br>&emsp;1.3 提出新的算法。</li><li>算法描述<br>&emsp;2.1 LBP 特征<br>&emsp;2.2 HOG 特征<br>&emsp;2.3 本文特征融合方法<br>&emsp;&emsp;2.3.1 分层特征（多提取几次）<br>&emsp;&emsp;2.3.2 分层 LBP 与原始 HOG 特征的融合步骤<br>&emsp;&emsp;2.3.3 分层 LBP 与基于分层 LBP 的分层 HOG 特征的融合步骤<br>&emsp;&emsp;2.3.4 相似性度量方法 </li><li>仿真实验与实验分析<br>&emsp;3.1 实验环境及预处理<br>&emsp;3.2 特征融合算法比较（介绍对比方法）<br>&emsp;3.3 ORL 人脸库实验结果分析<br>&emsp;&emsp;3.3.1 分块大小的比较<br>&emsp;&emsp;3.3.2 相似性度量方法比较<br>&emsp;&emsp;3.3.3 融合方法效果图<br>&emsp;3.4 Yale 人脸库实验结果分析<br>&emsp;&emsp;3.4.1 分块大小的比较<br>&emsp;&emsp;3.4.2 相似性度量方法比较<br>&emsp;&emsp;3.4.3 融合方法效果图<br>&emsp;3.5 Yale 人脸库实验结果分析<br>&emsp;&emsp;3.5.1 分块大小的比较<br>&emsp;&emsp;3.5.2 相似性度量方法比较<br>&emsp;&emsp;3.5.3 融合方法效果图<br>&emsp;3.6 时间复杂度分析<br>&emsp;3.7 算法性能评价（排序值评测法）</li><li>结论</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p>人脸识别常用的方法主要有 2 种：<br>&emsp;(1)基于全局特征的人脸识别技术, 其核心思想是将高维的人脸图像特征通过线性或非线性变化映射到一个低维的子空间中, 使得原始样本特征在这个低维子空间中更易于分类。全局特征能够有效地表示人脸的整体轮廓, 经典的方法是主成分分析(principle component analysis, PCA)、线性判别分析(linear discriminant analysis, LDA)、独立成分分析(independent component analysis, ICA)等.<br>&emsp;(2)一种是基于局部特征的人脸识别技术, 局部特征侧重于反映人脸的细节特征, 其中广泛使用的有局部二值模式(local binary pattern, LBP)、尺度不变特征变换 (scale invariant feature transform,SIFT)以及梯度方向直方图(histogram of orientedgradient, HOG)等.</p></li><li><p>LBP 特征主要提取图像的纹理信息, HOG 特征可以提取图像完整的边缘和形状信息, 并利用纹理信息和边缘轮廓信息的互补性提高识别率, 且将局部特征和整体特征相结<br>合, 进一步将分层信息融合进行人脸识别。</p></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>分类器中使用的距离被称为：相似性度量方法。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;使用LBP和HOG两种局部特征，并采用分层的思想，将纹理特征和边界特征融合。&lt;/p&gt;
&lt;h2 id=&quot;内容&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="论文阅读" scheme="http://115.159.44.202/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人脸识别" scheme="http://115.159.44.202/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
      <category term="论文阅读" scheme="http://115.159.44.202/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
      <category term="特征提取" scheme="http://115.159.44.202/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
      <category term="局部二值模式" scheme="http://115.159.44.202/tags/%E5%B1%80%E9%83%A8%E4%BA%8C%E5%80%BC%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="梯度方向直方图" scheme="http://115.159.44.202/tags/%E6%A2%AF%E5%BA%A6%E6%96%B9%E5%90%91%E7%9B%B4%E6%96%B9%E5%9B%BE/"/>
    
      <category term="分层特征" scheme="http://115.159.44.202/tags/%E5%88%86%E5%B1%82%E7%89%B9%E5%BE%81/"/>
    
  </entry>
  
  <entry>
    <title>《Face recognition based on PCA and logistic regression analysis》阅读笔记</title>
    <link href="http://115.159.44.202/2017/10/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/%E3%80%8AFace%20recognition%20based%20on%20PCA%20and%20logistic%20regression%20analysis%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://115.159.44.202/2017/10/17/论文阅读/人脸识别/《Face recognition based on PCA and logistic regression analysis》阅读笔记/</id>
    <published>2017-10-17T08:07:29.000Z</published>
    <updated>2017-10-17T11:12:58.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Brief-Introduction"><a href="#Brief-Introduction" class="headerlink" title="Brief Introduction"></a>Brief Introduction</h2><p>&emsp;&emsp;使用PCA进行特征提取，使用LRC作为分类器。</p><h2 id="Proposed-Method"><a href="#Proposed-Method" class="headerlink" title="Proposed Method"></a>Proposed Method</h2><p>&emsp;&emsp;ChangjunZhou proposed a novel face recognition method which is based on PCA and logistic regression.By combining the advantages of both the PCA and logistic regression, they use PCA to extract feature and reduce the dimensions of process data and use logistic regression as the classifier for face recognition.</p><h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><p>1 Introduction<br>&emsp;1.1 人脸识别现状（十分热门，但是有挑战性+影响因素，提出了很多方法）<br>&emsp;1.2 文章解决的两类问题<br>&emsp;&emsp;1.2.1 特征提取（PCA由来+简介）<br>&emsp;&emsp;1.2.2 分类器（分类器简介+SVM优点缺点+LRC算法简介和进化）<br>&emsp;1.3 本文算法优点<br>&emsp;1.4 文章组织结构<br>2 Related algorithms<br>&emsp;2.1 Principal component analysis(PCA)<br>&emsp;2.2 Logistic regression analysis<br>3 Proposed face recognition method（算法的流程）<br>4 Experimental results and discussion<br>&emsp;4.1 Yale database<br>&emsp;4.2 ORL database<br>5 Conclusions</p><h2 id="Sentences"><a href="#Sentences" class="headerlink" title="Sentences"></a>Sentences</h2><ol><li>Face recognition is an important research hotspot in the fields of pattern recognition and artificial intelligence, and it has attained great success in recent years.</li><li>Assume we have a training set …… with N images,belonging to c classes.</li><li>First, we preprocessed the input images, mainly including histogram equalization, geometry normalization, in order to remove the illuminations, shades, and lighting effects possibly, and then partitioned into a training set from face database and the rest is a testing set.</li><li>To illustrate the efficacy of our proposed method, we compared the performances on two standard databases, i.e., Yale database and the ORL database.</li><li>The Yale face database contains images with major variations, including changes in illumination conditions, subjects wearing eyeglasses and different facial expressions. This database involves 165 frontal facial images, with 11 images of 15 individuals.</li><li>To evaluate the effectiveness of the algorithms better, each image is scaled down to the size of 100 × 100 pixels.</li></ol><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><ol><li>类间离散矩阵：between-class scatter matrix</li><li>类内离散矩阵：within-class scatter matrix</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Brief-Introduction&quot;&gt;&lt;a href=&quot;#Brief-Introduction&quot; class=&quot;headerlink&quot; title=&quot;Brief Introduction&quot;&gt;&lt;/a&gt;Brief Introduction&lt;/h2&gt;&lt;p&gt;&amp;emsp;
      
    
    </summary>
    
      <category term="论文阅读" scheme="http://115.159.44.202/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人脸识别" scheme="http://115.159.44.202/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
      <category term="论文阅读" scheme="http://115.159.44.202/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
      <category term="PCA" scheme="http://115.159.44.202/tags/PCA/"/>
    
      <category term="逻辑回归" scheme="http://115.159.44.202/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
      <category term="线性回归" scheme="http://115.159.44.202/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning 第一周和第二周</title>
    <link href="http://115.159.44.202/2017/10/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Andrew/Machine%20Learning%20%E7%AC%AC%E4%B8%80%E5%91%A8%E5%92%8C%E7%AC%AC%E4%BA%8C%E5%91%A8/"/>
    <id>http://115.159.44.202/2017/10/16/机器学习/Andrew/Machine Learning 第一周和第二周/</id>
    <published>2017-10-16T01:53:48.000Z</published>
    <updated>2017-10-16T07:59:52.689Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;一直有想看Andrew Ng的机器学习课程，但是拖了很久都没有看完。之前也写过一些相关的博客，但是在博客搬家的时候没有保存下来。<br>&emsp;&emsp;第一周和第二周的内容比较少，作业也是在一起布置的。</p><h1 id="WEEK-1"><a href="#WEEK-1" class="headerlink" title="WEEK 1"></a>WEEK 1</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="What-is-machine-learning"><a href="#What-is-machine-learning" class="headerlink" title="What is machine learning?"></a>What is machine learning?</h3><ol><li>机器学习的定义：为了完成某个目标T，从经验E中学习，同时具有一定的判断标准P。</li></ol><h3 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h3><ol><li>监督学习：部分样本已有正确的结果。</li><li>分类：<br>&emsp;回归问题（regression）：预测输出结果是连续值。<br>&emsp;分类问题（classification）：预测输出结果是离散值。</li></ol><h3 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h3><ol><li>从数据本身的结构中得到模型。</li><li>预测结果无反馈。</li></ol><h2 id="Linear-Regression-with-One-Variable（单变量线性回归）"><a href="#Linear-Regression-with-One-Variable（单变量线性回归）" class="headerlink" title="Linear Regression with One Variable（单变量线性回归）"></a>Linear Regression with One Variable（单变量线性回归）</h2><h3 id="Model-Representation"><a href="#Model-Representation" class="headerlink" title="Model Representation"></a>Model Representation</h3><ol><li>符号定义：<br>&emsp;$m$：训练样本数<br>&emsp;$x’s$：输入变量<br>&emsp;$y$：输出变量<br>&emsp;$(x,y)$：一个训练样本<br>&emsp;$(x^{(i)},y^{(i)})$：第$i$个训练样本</li></ol><h3 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h3><ol><li>假设函数：$h_\theta(x)=\theta_0+\theta_1x$</li><li>代价函数（误差平方函数）：$J(\theta_0,\theta_1)=\frac{1}{m}\sum_{i=1}^{m}(h_{\theta}(x_i)-y_i)^2$</li><li>目标：最小化代价函数&emsp; $minmize J(\theta_0,\theta_1)$</li></ol><h3 id="Cost-Function-Intuition-1"><a href="#Cost-Function-Intuition-1" class="headerlink" title="Cost Function-Intuition 1"></a>Cost Function-Intuition 1</h3><h3 id="Cost-Function-Intuition-2"><a href="#Cost-Function-Intuition-2" class="headerlink" title="Cost Function-Intuition 2"></a>Cost Function-Intuition 2</h3><ol><li>$h_\theta(x)$是关于$x$的函数，$J(\theta_0,\theta_1)$是关于$\theta_0,\theta_1$的函数。</li><li>可以通过轮廓图来判断$\theta_0,\theta_1$和$J(\theta_0,\theta_1)$的关系。</li></ol><h3 id="Gradient-Descent（梯度下降）"><a href="#Gradient-Descent（梯度下降）" class="headerlink" title="Gradient Descent（梯度下降）"></a>Gradient Descent（梯度下降）</h3><ol><li>思想：<br>&emsp;(1). 选取一组$\theta_0,\theta_1$（通常都为0）<br>&emsp;(2). 不断更新$\theta_0$和$\theta_1$，直到$J(\theta_0,\theta_1)$达到局部最小值。<blockquote><p>repeat until covergence{<br>&emsp;&emsp;$\theta_j:=\theta_j-\alpha\frac{d}{d\theta_j}J(\theta_0,\theta_1)$<br>}</p></blockquote></li></ol><p>&emsp;其中$\alpha$是学习速率</p><ol><li>在变量更新过程中应保持同步更新。</li></ol><h3 id="Gradient-Descent-Intuition"><a href="#Gradient-Descent-Intuition" class="headerlink" title="Gradient Descent Intuition"></a>Gradient Descent Intuition</h3><ol><li>$\alpha$（学习速率）：<br>&emsp;(1). 过大，可能无法达到局部最低点。<br>&emsp;(2). 过小，十分缓慢地达到局部最低点。</li><li>通常，越靠近最低点，曲线的斜率越靠近0，迈的步子越小，所以没有必要在过程中修改$_alpha$。</li></ol><h3 id="Gradient-Descent-For-Linear-Regression"><a href="#Gradient-Descent-For-Linear-Regression" class="headerlink" title="Gradient Descent For Linear Regression"></a>Gradient Descent For Linear Regression</h3><ol><li>对变量的改变的求导展开为<br>&emsp;$\theta_0:=\theta_0-\alpha\frac{1}{m}\sum_{i=1}^{m}(h_{\theta}(x_i)-y_i)$<br>&emsp;$\theta_1:=\theta_1-\alpha\frac{1}{m}\sum_{i=1}^{m}(h_{\theta}(x_i)-y_i)\cdot x_i$</li></ol><h2 id="Linear-Algebra-Review"><a href="#Linear-Algebra-Review" class="headerlink" title="Linear Algebra Review"></a>Linear Algebra Review</h2><h3 id="Matrices-and-Vextors"><a href="#Matrices-and-Vextors" class="headerlink" title="Matrices and Vextors"></a>Matrices and Vextors</h3><ol><li>一般使用大写字母表示矩阵，小写字母表示向量。</li><li>$R$表示实数集，$R^n$表示由实数集组成的$n$维向量。</li></ol><h3 id="Addition-and-Scalar-Multiplication"><a href="#Addition-and-Scalar-Multiplication" class="headerlink" title="Addition and Scalar Multiplication"></a>Addition and Scalar Multiplication</h3><ol><li>Scalar Multiplication：标量乘法，即一个实数乘以一个矩阵。</li></ol><h3 id="Matrix-Vector-Multiplication"><a href="#Matrix-Vector-Multiplication" class="headerlink" title="Matrix Vector Multiplication"></a>Matrix Vector Multiplication</h3><ol><li>一个$m\times n$的矩阵与一个$n\times 1$的向量相乘的结果是一个$m\times 1$的向量。</li></ol><h3 id="Matrix-Matrix-Multiplication"><a href="#Matrix-Matrix-Multiplication" class="headerlink" title="Matrix Matrix Multiplication"></a>Matrix Matrix Multiplication</h3><ol><li>一个$m\times n$的矩阵与一个$n\times o$的矩阵相乘的结果是一个$m\times o$的矩阵。</li></ol><h3 id="Matrix-Multiplication-Properties（矩阵乘法的特性）"><a href="#Matrix-Multiplication-Properties（矩阵乘法的特性）" class="headerlink" title="Matrix Multiplication Properties（矩阵乘法的特性）"></a>Matrix Multiplication Properties（矩阵乘法的特性）</h3><h3 id="Inverse-and-Transpose"><a href="#Inverse-and-Transpose" class="headerlink" title="Inverse and Transpose"></a>Inverse and Transpose</h3><ol><li>$A$的逆矩阵为$A^{-1}$。</li><li>一个非方阵的矩阵无逆矩阵。</li></ol><h1 id="WEEK-2"><a href="#WEEK-2" class="headerlink" title="WEEK 2"></a>WEEK 2</h1><h2 id="Multivariate-Linear-Regression（多元线性回归）"><a href="#Multivariate-Linear-Regression（多元线性回归）" class="headerlink" title="Multivariate Linear Regression（多元线性回归）"></a>Multivariate Linear Regression（多元线性回归）</h2><h3 id="Multiple-Features"><a href="#Multiple-Features" class="headerlink" title="Multiple Features"></a>Multiple Features</h3><ol><li>符号定义：<br>&emsp;$n$：特征的数量<br>&emsp;$x^{(i)}$：第$i$个样本的特征<br>&emsp;$x_{j}^{(i)}$：第$i$个样本的第$j$个特征</li></ol><h3 id="Gradient-Descent-for-Multiple-Variables"><a href="#Gradient-Descent-for-Multiple-Variables" class="headerlink" title="Gradient Descent for Multiple Variables"></a>Gradient Descent for Multiple Variables</h3><ol><li>假设：$h_\theta(x)=\theta^Tx=\theta_0x_0+\theta_1x_1+…+\theta_nx_n$，其中$x_0=1$。</li><li>变量：$\theta=[\theta_0,\theta_1,…,\theta_n]^T$</li><li>代价函数：$J(\theta_0,\theta_1)=\frac{1}{m}\sum_{i=1}^{m}(h_{\theta}(x_i)-y_i)^2$</li><li>更新：<blockquote><p>repeat until covergence{<br>&emsp;&emsp;$\theta_j:=\theta_j-\alpha\frac{1}{m}h_{theta}(x_i)-y_i)x_{j}^{(i)}$<br>}</p></blockquote></li></ol><h3 id="Gradient-Descent-in-Practice-1-Feature-Scaling（特征缩放）"><a href="#Gradient-Descent-in-Practice-1-Feature-Scaling（特征缩放）" class="headerlink" title="Gradient Descent in Practice 1-Feature Scaling（特征缩放）"></a>Gradient Descent in Practice 1-Feature Scaling（特征缩放）</h3><ol><li>特征的尺度相似时，梯度下降进行得更快。</li><li>均一化（Mean normalization）：$x_i=\frac{x_i-\mu_i}{s_i}$，其中$\mu_i$是均值，$s_i$是范围（最大值-最小值）</li></ol><h3 id="Gradient-Descent-in-Practice-2-Learning-rate"><a href="#Gradient-Descent-in-Practice-2-Learning-rate" class="headerlink" title="Gradient Descent in Practice 2-Learning rate"></a>Gradient Descent in Practice 2-Learning rate</h3><ol><li>可以通过画$J(\theta)$和迭代次数的关系曲线图，来判断$\alpha$的选择是否正确。</li><li>正常情况下，$J(\theta)$会随着迭代次数的增加而减小。</li><li>$J(\theta)$下降得很慢，则$\alpha$过小。</li><li>$J(\theta)$上升或者不是持续下降，则$\alpha$过大。</li></ol><h3 id="Features-and-Polynomial-Regression"><a href="#Features-and-Polynomial-Regression" class="headerlink" title="Features and Polynomial Regression"></a>Features and Polynomial Regression</h3><ol><li>改进假设函数的方法：<br>&emsp;(1). 将多个特征合为一个特征。<br>&emsp;(2). 多项式回归。</li></ol><h2 id="Computing-Parameters-Analytically"><a href="#Computing-Parameters-Analytically" class="headerlink" title="Computing Parameters Analytically"></a>Computing Parameters Analytically</h2><h3 id="Normal-Equation（正规方程）"><a href="#Normal-Equation（正规方程）" class="headerlink" title="Normal Equation（正规方程）"></a>Normal Equation（正规方程）</h3><ol><li>正规方程求解$\theta$时可以一步到位。</li><li>假设有$m$个变量，每个变量有$n$个特征。<br>构建$X=\begin{bmatrix}<br>1 &amp; 1 &amp; … &amp; 1 \\<br>x^{(1)} &amp; x^{(1)} &amp; … &amp; x^{(m)}<br>\end{bmatrix} ^T$，$Y=[y^{(1)},y^{(2)},…,y^{(m)}]^T$<br>$X\theta = Y$<br>所以$\theta =(X^TX)^{-1}X^TY$</li><li>对正规方程来说，没有必要使用特征缩放。</li><li>正规方程：$\theta \in R^{n+1}$，即求得$\theta _0,\theta _1, …,\theta _n$<br>使得$\frac{d}{d\theta _j}J(\theta )=…=0$，其中$J(\theta_0,\theta_1)=\frac{1}{m}\sum_{i=1}^{m}(h_{\theta}(x_i)-y_i)^2$。</li><li>对比：<br>|梯度下降|正规方程|<br>|:–:|:–:|<br>|需要选择$\alpha$|不需要选择$\alpha$|<br>|需要迭代|不需要迭代|<br>|时间复杂度$O(n^2)$|时间复杂度$O(n^3)$|<br>|$n$大时也有效|当$n$大时，运行缓慢|</li><li>$n\leq 10000$，可选择正规方程求解。</li></ol><h3 id="Normal-Equation-Noninvertibility（不可逆性）"><a href="#Normal-Equation-Noninvertibility（不可逆性）" class="headerlink" title="Normal Equation Noninvertibility（不可逆性）"></a>Normal Equation Noninvertibility（不可逆性）</h3><ol><li>$X^TX$不可逆的原因可能为：<br>&emsp;(1). 特征之间关联大。<br>&emsp;(2). 特征数量太多。</li></ol><h1 id="PROGRAMMING"><a href="#PROGRAMMING" class="headerlink" title="PROGRAMMING"></a>PROGRAMMING</h1><h2 id="warmUpExercise"><a href="#warmUpExercise" class="headerlink" title="warmUpExercise"></a>warmUpExercise</h2><p>&emsp;&emsp;在warmUpExercise.m中添加：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A = <span class="built_in">eye</span>(<span class="number">5</span>);</div></pre></td></tr></table></figure></p><h2 id="Linear-regression-with-one-variable"><a href="#Linear-regression-with-one-variable" class="headerlink" title="Linear regression with one variable"></a>Linear regression with one variable</h2><h3 id="computeCost"><a href="#computeCost" class="headerlink" title="computeCost"></a>computeCost</h3><p>&emsp;&emsp;在computeCost.m中添加：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ypre=X*theta;</div><div class="line">J=<span class="number">1</span>/<span class="number">2</span>/m*sum((ypre-y).^<span class="number">2</span>);</div></pre></td></tr></table></figure></p><h3 id="gradientDescent"><a href="#gradientDescent" class="headerlink" title="gradientDescent"></a>gradientDescent</h3><p>&emsp;&emsp;gradientDescent.m中添加：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theta=theta-(alpha/m*sum(<span class="built_in">bsxfun</span>(@times,X*theta-y,X)))';</div></pre></td></tr></table></figure></p><h2 id="Linear-regression-with-multiple-variables"><a href="#Linear-regression-with-multiple-variables" class="headerlink" title="Linear regression with multiple variables"></a>Linear regression with multiple variables</h2><h3 id="Feature-Normalization"><a href="#Feature-Normalization" class="headerlink" title="Feature Normalization"></a>Feature Normalization</h3><p>&emsp;&emsp;在featureNormalize.m中添加：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mu=mean(X);</div><div class="line">sigma=std(X);</div><div class="line">X_norm=<span class="built_in">bsxfun</span>(@rdivide,<span class="built_in">bsxfun</span>(@minus,X,mu),sigma);</div></pre></td></tr></table></figure></p><h3 id="computeCostMulti"><a href="#computeCostMulti" class="headerlink" title="computeCostMulti"></a>computeCostMulti</h3><p>&emsp;&emsp;在computeCostMulti.m中添加：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ypre=X*theta;</div><div class="line">J=<span class="number">1</span>/<span class="number">2</span>/m*sum((ypre-y).^<span class="number">2</span>);</div></pre></td></tr></table></figure></p><h3 id="gradientDescentMulti"><a href="#gradientDescentMulti" class="headerlink" title="gradientDescentMulti"></a>gradientDescentMulti</h3><p>&emsp;&emsp;在gradientDescentMulti.m中添加：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theta=theta-(alpha/m*sum(<span class="built_in">bsxfun</span>(@times,X*theta-y,X)))';</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;在ex1_multi.m中修改：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">price = [<span class="number">1650</span>,<span class="number">3</span>];</div><div class="line">price=[<span class="number">1</span>,(price-mu)./sigma] * theta;</div></pre></td></tr></table></figure></p><h2 id="normalEqn"><a href="#normalEqn" class="headerlink" title="normalEqn"></a>normalEqn</h2><p>&emsp;&emsp;normalEqn.m中添加：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theta=X'*X \ X'*y;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;在ex1_multi.m中修改：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">price = [<span class="number">1</span>,<span class="number">1650</span>,<span class="number">3</span>];</div><div class="line">price=price* theta;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;一直有想看Andrew Ng的机器学习课程，但是拖了很久都没有看完。之前也写过一些相关的博客，但是在博客搬家的时候没有保存下来。&lt;br&gt;&amp;emsp;&amp;emsp;第一周和第二周的内容比较少，作业也是在一起布置的。&lt;/p&gt;
&lt;h1 id=&quot;WEEK-1&quot;
      
    
    </summary>
    
      <category term="机器学习" scheme="http://115.159.44.202/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="matlab" scheme="http://115.159.44.202/tags/matlab/"/>
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Coursera" scheme="http://115.159.44.202/tags/Coursera/"/>
    
  </entry>
  
  <entry>
    <title>从苏大到东南，四年又三年</title>
    <link href="http://115.159.44.202/2017/10/10/%E9%9A%8F%E8%AE%B0/%E4%BB%8E%E8%8B%8F%E5%A4%A7%E5%88%B0%E4%B8%9C%E5%8D%97%EF%BC%8C%E5%9B%9B%E5%B9%B4%E5%8F%88%E4%B8%89%E5%B9%B4/"/>
    <id>http://115.159.44.202/2017/10/10/随记/从苏大到东南，四年又三年/</id>
    <published>2017-10-10T09:02:29.000Z</published>
    <updated>2017-10-10T10:11:29.875Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;保研的所有在9月28日定下来了，最后去了东南大学计算机科学与工程学院，进了PALM实验室，以后可能会做自然语言处理。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>&emsp;&emsp;在我高考炸了报考苏大的时候，就准备读研了。当时还想着读了其他专业转专业到金融来着，但是读了一年计算机觉得也可以，比金融好一些，就放弃了转专业。但是从始至终我都知道自己是要读研究生的，所以也不存在晃晃荡荡的。绩点也还可以，保证我可以拿到校内的保研名额，也没有挂过科。<br>&emsp;&emsp;科研方面，很多人加入了ACM，然后去打比赛，拿铜牌银牌金牌，我认识一个保研去了南大现在在微软实习的大佬就是拿了金牌，当然他本身就很厉害。我是在大一的时候，在一个老师的介绍下加入了机器学习课题组，做单样本人脸识别相关的实验，然后写了一篇很简单的英文论文。但是在高校夏令营开始的时候论文还没录用，所以很多夏令营我都不敢去。<br>&emsp;&emsp;保研是一个长期工作，大概前期就是保持成绩好，然后做一些项目来充实自己，让简历有东西可填，自我介绍的时候有话可以说。</p><h2 id="PALM实验室面试"><a href="#PALM实验室面试" class="headerlink" title="PALM实验室面试"></a>PALM实验室面试</h2><p>&emsp;&emsp;在一个学长的介绍下知道了PALM实验室，听说很厉害的样子，耿新老师很有名，虽然在网上并不能查到什么资料。6月末，有个原先是苏大后来去了东南的师兄在隔壁班的群里发了PALM的面试招生的要求，潘大佬顺带发给了我，然后我们就兴冲冲地报了名。<br>&emsp;&emsp;报名就是给薛晖老师发了一封邮件，附件是自己的简历。最好提前就准备一份好看的简历，可以参考下网上的一些要求。多检查几次，我就是第一次发错了，然后又重发的。邮件正文最好也是写一些东西，以表现出自己的真诚和期待。<br>&emsp;&emsp;在发了简历之后几天，就收到了实验室的面试通知，基本上身边的发了都收到了，然后大家就组团去面试。面试要求准备一份PPT和对应的自我介绍。经验就是，PPT保持16：9就好，然后放在U盘的根目录下，以自己的姓名保存。<br>&emsp;&emsp;面试的教室就像一般的会议室，老师坐在对面，学生坐在另一边，用电脑进行幻灯片的放映和介绍。老师会根据你的PPT来对你进行提问，并不是很严肃的，就是像聊天一样。当时我还太紧张，有些没有听清。大概十分钟左右就结束了。出来和他们聊天，发现如果老师对你有兴趣，就会多问一些问题。所以有什么特长啊，不要藏着掖着，在自我介绍的时候要说出来。<br>&emsp;&emsp;面试的当晚11点左右，就收到了实验室通过的邮件，并给我分了老师。然后就是和分配的老师邮件交流之类的。这个是后话了。<br>&emsp;&emsp;另外在东南预招生结束后一般PALM实验室也会有一次招生，不过那次竞争就比较激烈了。当然，对大佬不存在问题。</p><h2 id="东南预招生"><a href="#东南预招生" class="headerlink" title="东南预招生"></a>东南预招生</h2><p>&emsp;&emsp;东南预招生报名时间比较长，去考试的时后也比较晚了，在8月28日-8月29日。预招生的报考专业在之后可以修改，所以在联系老师之后发现老师与报考方向不同也没有问题，在录取后会有一次更改的机会。我当时报了计科，然而最后还是滚去了软件工程。<br>&emsp;&emsp;笔试考的是操作系统和数据结构两门。考试时间好像是100分钟，大概有十道题左右。操作系统比较简单，数据结构比较难。操作系统考到了了甘特图，数据结构考了平衡树的插入与删除、数据的保存、算法的实现（在O(n)的时间复杂度中实现判断链表保存的字符串是不是回文），其余的我不记得了。我大概复习了一个月的数据结构和操作系统，操作系统是将考研的书看了一遍，数据结构是借的学校的一本书，看完还是很有收获的。<br>&emsp;&emsp;笔试玩就是导师介绍，然而并没有，只有一个教务处老师来和我们说了一些注意事项。<br>&emsp;&emsp;面试分组我被分到了第一个，这导致了我前一天晚上完全没有睡好。当然可能我是第一个，我面试的时候老师也没准备好，就让我做了一下中文的自我介绍，以及问了我报考了哪些学校就让我出去了。一脸懵逼。不是说好的会考英文的么？准备了一个晚上的英文和项目介绍，3分钟我就结束了我的面试。当然在事后听说有全英文面试的，室友也是被怼的体无完肤，但是凭借良好的认错态度也过了。提问的问题基本和报考的方向有关，可以事先准备一下。<br>&emsp;&emsp;在9月3日左右出了结果，可以在官网看到。</p><h2 id="苏大保研名额"><a href="#苏大保研名额" class="headerlink" title="苏大保研名额"></a>苏大保研名额</h2><p>&emsp;&emsp;我原来以为苏大保研名额很好拿的，所以浪到6号才回的学校。然而一回学校就通知我9月14日就要考试。我又开始手忙脚乱地准备学校的保研考试。软件工程大概就是4-5个名额的样子，说好的10%都是骗人的。考试分为上机和面试两个部分。上机总分100分，选择50分，编程50分，最后再把总分乘以1.2，所以是120分。面试80分。上机的准备就是把往年的题目做一遍，我是每天三题做，选择就是一份一份地刷。如果开始的早的话，可以先把C语言书看一遍。<br>&emsp;&emsp;苏大编程基本三个类型：一是超简单的C语言考试的水平，二是字典树这种和字符串有关的，三是和坐标、点有关的。和出试卷的老师有关。刷一遍往年的就差不多了。<br>&emsp;&emsp;面试基本靠运气抽题，抽到好就简单。然而我们那组的面试老师有院长，基本都是被怼的体无完肤。这个，主要还是看平时和老师的关系吧。</p><h2 id="其余一些话"><a href="#其余一些话" class="headerlink" title="其余一些话"></a>其余一些话</h2><p>&emsp;&emsp;厉害的大佬们都去了清华北大中科院浙大啊等等等等，有兴趣的可以都去试试，反正除了车费和住宿也不花啥钱，万一中了还有个好大学。我就是太怂不敢去。其实去的多的同学说，问的问题都是差不多的，之前回答不出来，回来准备下，下次就能答出来了。<br>&emsp;&emsp;关于南大，南大今年我们学校的专业第一也不要，只要大佬。绝望.jpg。<br>&emsp;&emsp;祝看到的各位前程似锦。（虽然我觉得我的并不能被检索到）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;保研的所有在9月28日定下来了，最后去了东南大学计算机科学与工程学院，进了PALM实验室，以后可能会做自然语言处理。&lt;/p&gt;
&lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;
      
    
    </summary>
    
      <category term="随记" scheme="http://115.159.44.202/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="随记" scheme="http://115.159.44.202/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《统计学习方法》之感知机</title>
    <link href="http://115.159.44.202/2017/09/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/%E3%80%8A%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E3%80%8B%E4%B9%8B%E6%84%9F%E7%9F%A5%E6%9C%BA/"/>
    <id>http://115.159.44.202/2017/09/19/机器学习/统计学习方法/《统计学习方法》之感知机/</id>
    <published>2017-09-19T07:32:18.000Z</published>
    <updated>2017-09-22T12:11:04.635Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;感知机（perceptron）是一种二类分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别，通常取$+1$和$-1$两值。感知机学习目的是求出将训练数据进行线性划分的分离<a href="http://blog.csdn.net/denghecsdn/article/details/77313758" target="_blank" rel="noopener">超平面</a>。</p><h2 id="感知机模型"><a href="#感知机模型" class="headerlink" title="感知机模型"></a>感知机模型</h2><h3 id="超平面"><a href="#超平面" class="headerlink" title="超平面"></a>超平面</h3><p>&emsp;&emsp;对于超平面，我们常用以下的方程来表示：<br>$$\omega\cdot x+b=0$$<br>其中，$\omega$是超平面的法向量，这决定超平面的方向，$b$是超平面的截距，决定超平面到原点的距离。<br>&emsp;&emsp;一般来说，超平面维度都大于3。百度百科上解释超平面是$n$维空间到$n-1$维空间的映射，因为超平面的自由度比空间维数小1，其中自由度大体是指给多少分量值才可以确定位置。<br>&emsp;&emsp;超平面将一个空间划分成两部分，位于两部分的点分别被分成正、负两类，这也恰好说明了感知机是一种二类分类的线性分类器。</p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>&emsp;&emsp;假设特征空间是$X\subseteq {R}^{n}$，输出空间是$Y={+1,-1}$。则感知机模型是由输入空间到输出控件的如下函数：<br>$$f(x)=sign(\omega \cdot  x + b) $$<br>其中，$\omega \in {R}^{n}$被称为权值或权值向量，$b \in {R}^{n}$被称为偏置。$\omega \cdot  x$为$\omega$和$x$的内积，$sign$是符号函数，两者的具体计算公式如下：<br>$$\omega \cdot  x= \omega_1x_1+\omega_2x_2+…+\omega_nx_n$$<br>$$sign(x)=\left\{\begin{matrix}<br>+1 &amp; x\geq 0 &amp; 超平面上或正面 \\<br>-1 &amp; x &lt; 0 &amp; 超平面的背面<br>\end{matrix}\right.$$</p><h2 id="感知机学习策略"><a href="#感知机学习策略" class="headerlink" title="感知机学习策略"></a>感知机学习策略</h2><h3 id="数据集的线性可分性"><a href="#数据集的线性可分性" class="headerlink" title="数据集的线性可分性"></a>数据集的线性可分性</h3><p>&emsp;&emsp;假设给定一个数据集，如果存在某个超平面能将数据集中的正实例点和负实例点正确地划分到数据集的两侧，则称这个数据集是线性可分数据集，否则称这个数据集线性不可分。</p><h3 id="感知机学习策略-1"><a href="#感知机学习策略-1" class="headerlink" title="感知机学习策略"></a>感知机学习策略</h3><p>&emsp;&emsp;之前提过，策略是评判一个模型的标准。感知机的学习目标是求得一个能够正确分离数据点的分离超平面。而为了找到这样的一个超平面，即确定超平面的参数$omega$和$b$，我们需要确定一个学习策略。<br>&emsp;&emsp;输入空间中的任何一个点$x_0$到超平面的距离为：<br>$$\frac{1}{\begin{Vmatrix}<br>\omega<br>\end{Vmatrix}}\begin{vmatrix}<br>\omega \cdot {x}_{0} +b<br>\end{vmatrix}$$<br>&emsp;&emsp;而对于误分类点来说，<br>$$-y_i(\omega \cdot x_i +b)&gt;0$$<br>&emsp;&emsp;所以我们可以将误分类点到超平面的距离统一写成如下形式：<br>$$-\frac{1}{\begin{Vmatrix}<br>\omega<br>\end{Vmatrix}} y_i(\omega \cdot x_i +b)$$<br>&emsp;&emsp;所以，假设超平面的误分类点集合为$M$，所有误分类点到超平面的距离总和为：<br>$$-\frac{1}{\begin{Vmatrix}<br>\omega<br>\end{Vmatrix}}\sum_{x_i \in M}^{} y_i(\omega \cdot x_i +b)$$<br>不考虑$\frac{1}{\begin{Vmatrix}<br>\omega<br>\end{Vmatrix}}$，就可以得到感知机的损失函数为：<br>$$L(\omega ,b)=-\sum_{x_i \in M}^{} y_i(\omega \cdot x_i +b)$$<br>&emsp;&emsp;显然，损失函数$L(\omega ,b)$是非负的。如果没有误分类点，则损失函数的值为0.误分类点个数越少，误分类点离超平面越近，损失函数值就越小。一个特定样本点的损失函数：在误分类时是参数$\omega$、$b$的线性函数，在正确分类时是0.因此，对于给定的训练数据集$T$，损失函数$L(\omega ,b)$是$\omega$、$b$的连续可导函数。</p><h2 id="感知机学习算法"><a href="#感知机学习算法" class="headerlink" title="感知机学习算法"></a>感知机学习算法</h2><h3 id="感知机学习算法的原始形式"><a href="#感知机学习算法的原始形式" class="headerlink" title="感知机学习算法的原始形式"></a>感知机学习算法的原始形式</h3><p>&emsp;&emsp;感知机学习算法是误分类驱动的，要想最小化感知机的损失函数，可以采用随机梯度下降算法。梯度下降算法在coursera上的Machine Learning课程的一开始有很详细的讲解。</p><blockquote><p>感知机学习算法的原始形式<br>输入：训练数据集$T={(x_1,y_1),(x_2,y_2),…,(x_N,y_N)}$，其中$x_i \in X=R^n$，$y_i \in Y={-1, +1}$，$i=1,2,…，N$，学习率$\eta (0 &lt; \eta \leq 1)$;<br>输出：$\omega ,b$；感知机模型$f(x)=sign(\omega \cdot  x + b)$<br>(1) 选取初始值$\omega _0, b_0$<br>(2) 在训练集中选取数据$(x_i, y_i)$     （2、3两步是根据误分类点调整参数，一般我们选点还是按照1至N的顺序选）<br>(3) 如果$y_i(\omega \cdot x_i +b)\leq 0$<br>$$\omega \leftarrow \omega +\eta y_ix_i$$<br>$$b\leftarrow b +\eta y_i$$<br>(4) 转至(2)，直至训练集中没有误分类点</p></blockquote><p>&emsp;&emsp;这个算法直观上有如下解释：当一个实例点被误分类，就调整参数值，让超平面向该误分类点移动，以减少两者之间的距离，直到超平面将该误分类点正确分类。</p><h3 id="算法的收敛性"><a href="#算法的收敛性" class="headerlink" title="算法的收敛性"></a>算法的收敛性</h3><p>&emsp;&emsp;用变量$\hat{\omega }$ 表示$(\omega ^T, b)^T$。这里存在两个定理（Novikoff）：<br>&emsp;&emsp;假设训练数据集$T={(x_1,y_1),(x_2,y_2),…,(x_N,y_N)}$是线性可分的，其中$x_i \in X=R^n$，$y_i \in Y={-1, +1}$，$i=1,2,…，N$，则<br>&emsp;&emsp;（1）存在满足条件$\begin{Vmatrix}<br>\hat{\omega _{opt}}<br>\end{Vmatrix}=1$的超平面$\hat{\omega _{opt}\cdot \hat{x}=\omega _{opt}\cdot x + b_{opt}=0$将训练数据集完全分开；且存在$\gamma &gt;0$，对所有$i=1,2,…，N$，有<br>$$y_i (\hat{\omega _{opt}\cdot \hat{x_i})=y_i(\omega _{opt}\cdot x_i + b_{opt})\geq \gamma $$<br>&emsp;&emsp;（2）令$R=\max \begin{Vmatrix}<br>\hat{x_i}<br>\end{Vmatrix}$，则原始感知机算法在训练数据集上的误分类次数$k$满足不等式<br>$$k\leq (\frac{R}{\gamma })^2$$<br>&emsp;&emsp;这个定理表示，误分类次数是有上界的，所以当训练数据集线性可分时，感知机学习算法的原始形式的收敛的。</p><h3 id="感知机学习算法的对偶形式"><a href="#感知机学习算法的对偶形式" class="headerlink" title="感知机学习算法的对偶形式"></a>感知机学习算法的对偶形式</h3><p>&emsp;&emsp;感知机的对偶形式的基本思想是，将参数$\omega ,b$用实例$x_i$和标记$y_i$的线性组合表示，通过求解其系数而得到参数$\omega ,b$。<br>$$\omega =\sum_{i=1}^{N}\alpha _iy_ix_i$$<br>$$b=\sum_{i=1}^{N}\alpha _i y_i$$</p><blockquote><p>感知机学习算法的对偶形式<br>输入：训练数据集$T={(x_1,y_1),(x_2,y_2),…,(x_N,y_N)}$，其中$x_i \in X=R^n$，$y_i \in Y={-1, +1}$，$i=1,2,…，N$，学习率$\eta (0 &lt; \eta \leq 1)$;<br>输出：$\omega ,b$；感知机模型$f(x)=sign(\omega \cdot  x + b)$<br>其中，$\alpha =(\alpha _1,\alpha _2,…,\alpha _N)^T$<br>(1) 初始化$\alpha \leftarrow 0,b\leftarrow 0$<br>(2) 在训练集中选取数据$(x_i, y_i)$     （2、3两步是根据误分类点调整参数，一般我们选点还是按照1至N的顺序选）<br>(3) 如果$y_i(\sum_{N}^{j=1}\alpha _jy_jx_j\cdot x_i+b)\leq 0$<br>$$\alpha _i\leftarrow \alpha _i+\eta $$<br>$$b\leftarrow b +\eta y_i$$<br>(4) 转至(2)，直至训练集中没有误分类点</p></blockquote><p>&emsp;&emsp;在计算的时候，可以预先计算出训练集中实例之间的内积存储在矩阵中，这个矩阵就是Gram矩阵。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;感知机（perceptron）是一种二类分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别，通常取$+1$和$-1$两值。感知机学习目的是求出将训练数据进行线性划分的分离&lt;a href=&quot;http://blog.csdn.net/dengh
      
    
    </summary>
    
      <category term="《统计学习方法》" scheme="http://115.159.44.202/categories/%E3%80%8A%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E3%80%8B/"/>
    
    
      <category term="python" scheme="http://115.159.44.202/tags/python/"/>
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="《统计学习方法》" scheme="http://115.159.44.202/tags/%E3%80%8A%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>2016及2013复试上机</title>
    <link href="http://115.159.44.202/2017/09/12/%E4%BF%9D%E7%A0%94/2016%E5%8F%8A2013%E5%A4%8D%E8%AF%95%E4%B8%8A%E6%9C%BA/"/>
    <id>http://115.159.44.202/2017/09/12/保研/2016及2013复试上机/</id>
    <published>2017-09-12T06:27:29.000Z</published>
    <updated>2017-09-13T08:31:47.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2016年保研上机题"><a href="#2016年保研上机题" class="headerlink" title="2016年保研上机题"></a>2016年保研上机题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;0.    请从服务器将两个数据文件input.txt和words.txt下载到本地电脑的D盘根文件夹。<br>&emsp;&emsp;1.    在D盘根文件夹的words.txt中存储了不超过30000条的英文单词，每个单词占一行。单词的最大长度为20，且单词内部没有空格，文件中无重复单词。<br>&emsp;&emsp;2.    在D盘根文件夹的input.txt中存储了一个“丢失”了空格和标点符号的英文文章。每行不超过128个字符，请编写程序把该文章中的第一行和最后一行。<br>&emsp;&emsp;4.    编写程序利用words.txt中的单词作为词典，采用正向最大匹配切分单词算法对input.txt中的文本进行单词切分。切分时单词区分大小写，切分分割标记采用空格，并将切分后的结果写入到out.txt中。<br>&emsp;&emsp;5.    编写程序实现步骤2、3描述的要求，并通过如下所示的主函数对进行验证，注意：除了指定添加的代码之外，不得修改main函数其余部分。对main函数每修改一处，总分扣3分，最多扣10分。<br>&emsp;&emsp;6.    本次考试考核C语言程序设计，因此不可以使用C++的STL的任何功能，如果需要添加下面样例之外的程序头文件，请举手得到监考老师批准。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;一直说苏大的nlp比较好，所以就出了一道分词。其实做下来这么些年的上机题，发现常出现的有两个：文件操作、素数和字典树。<br>&emsp;&emsp;这道题给了主函数，主函数给了一个数组给我存放字典，但我犹豫了许久还是在这个数组的基础上建立了字典树。虽然一开始对字典树的一些操作比较麻烦，还差一点就没能在两个小时内完成，但性能确实提高了不少。<br>&emsp;&emsp;程序大概分为如下几个部分：<br>&emsp;&emsp;（1）读取文件，显示第一行和最后一行。<br>&emsp;&emsp;（2）读取单词。<br>&emsp;&emsp;（3）根据读取的结果建立字典树。<br>&emsp;&emsp;（4）遍历字典树，进行单词划分。<br>&emsp;&emsp;另外：给的input.txt有非英文字符，需注意。<br>&emsp;&emsp;这里纠正一个错误，C语言不允许在结构体里面写函数（毛大佬教我的），这里的函数还是拿出来比较好。但是代码我就不改了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//姓名：</span></div><div class="line"><span class="comment">//学号:</span></div><div class="line"><span class="comment">//具体解决思路描述：</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 30000</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Trienode</div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> c;</div><div class="line">Trienode * child[<span class="number">52</span>]; <span class="comment">// 前26个为小写，后26个为大写</span></div><div class="line"><span class="keyword">int</span> scount;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initNode</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i++) &#123;</div><div class="line">child[i] = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line">scount = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showFirstAndLastLine</span><span class="params">(<span class="keyword">char</span> * filename)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ReadWords</span><span class="params">(<span class="keyword">char</span> * filename, <span class="keyword">char</span> words[][<span class="number">24</span>])</span></span>;</div><div class="line"><span class="function">Trienode* <span class="title">buildTrieTree</span><span class="params">(<span class="keyword">char</span> words[][<span class="number">24</span>], <span class="keyword">int</span> count)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">divideWords</span><span class="params">(Trienode * head, <span class="keyword">char</span> filename1[], <span class="keyword">char</span> filename2[])</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> words[SIZE][<span class="number">24</span>];</div><div class="line"><span class="keyword">clock_t</span> start, finish;</div><div class="line">start = clock();</div><div class="line"></div><div class="line">showFirstAndLastLine(<span class="string">"d:\\input.txt"</span>);</div><div class="line"><span class="comment">//将input文件的第一行和最后一行显示在屏幕上</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> count = ReadWords(<span class="string">"d:\\words.txt"</span>, words);</div><div class="line"><span class="comment">//读取英文字典，并返回单词数量</span></div><div class="line"></div><div class="line"><span class="comment">//此处可以添加处理逻辑以实现题目的第3点要求</span></div><div class="line"><span class="comment">//建议将需要的功能实现为多个函数后在此直接或者间接调用</span></div><div class="line">Trienode * head = buildTrieTree(words, count);</div><div class="line">divideWords(head, <span class="string">"d:\\input.txt"</span>, <span class="string">"d:\\out.txt"</span>);</div><div class="line"></div><div class="line">finish = clock();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Total time:%lf\n"</span>, (<span class="keyword">double</span>)(finish - start) / CLOCKS_PER_SEC);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showFirstAndLastLine</span><span class="params">(<span class="keyword">char</span> * filename)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> sen[<span class="number">128</span>], temp[<span class="number">128</span>];</div><div class="line">FILE *fp = fopen(filename, <span class="string">"r"</span>);</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, sen) != EOF) &#123;</div><div class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"First line:%s\n"</span>, sen);</div><div class="line">&#125;</div><div class="line"><span class="built_in">strcpy</span>(temp, sen);</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Last line:%s\n"</span>, temp);</div><div class="line"></div><div class="line">fclose(fp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ReadWords</span><span class="params">(<span class="keyword">char</span> * filename, <span class="keyword">char</span> words[][<span class="number">24</span>])</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">char</span> w[<span class="number">24</span>];</div><div class="line">FILE *fp = fopen(filename, <span class="string">"r"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, w) != EOF&amp;&amp; count &lt; SIZE) &#123;</div><div class="line"><span class="built_in">strcpy</span>(words[count], w);</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fclose(fp);</div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Trienode* <span class="title">buildTrieTree</span><span class="params">(<span class="keyword">char</span> words[][<span class="number">24</span>], <span class="keyword">int</span> count)</span></span></div><div class="line">&#123;</div><div class="line">Trienode * head = (Trienode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Trienode));</div><div class="line">Trienode * n, *p;</div><div class="line">head-&gt;initNode();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">p = head;</div><div class="line"><span class="keyword">while</span> (words[i][j] != <span class="string">'\0'</span>) &#123;</div><div class="line"><span class="keyword">if</span> (words[i][j] &gt;= <span class="string">'a'</span> &amp;&amp; words[i][j] &lt;= <span class="string">'z'</span>) &#123;</div><div class="line"><span class="keyword">if</span> (p-&gt;child[words[i][j] - <span class="string">'a'</span>] == <span class="literal">NULL</span>) &#123;</div><div class="line">n = (Trienode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Trienode));</div><div class="line">n-&gt;c = words[i][j];</div><div class="line">n-&gt;initNode();</div><div class="line">p-&gt;child[words[i][j] - <span class="string">'a'</span>] = n;</div><div class="line">&#125;</div><div class="line">p = p-&gt;child[words[i][j] - <span class="string">'a'</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span> (p-&gt;child[words[i][j] - <span class="string">'A'</span> + <span class="number">26</span>] == <span class="literal">NULL</span>) &#123;</div><div class="line">n = (Trienode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Trienode));</div><div class="line">n-&gt;c = words[i][j];</div><div class="line">n-&gt;initNode();</div><div class="line">p-&gt;child[words[i][j] - <span class="string">'A'</span> + <span class="number">26</span>] = n;</div><div class="line">&#125;</div><div class="line">p = p-&gt;child[words[i][j] - <span class="string">'A'</span> + <span class="number">26</span>];</div><div class="line">&#125;</div><div class="line">j++;</div><div class="line">&#125;</div><div class="line">p-&gt;scount++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> head;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">divideWords</span><span class="params">(Trienode * head, <span class="keyword">char</span> filename1[], <span class="keyword">char</span> filename2[])</span></span></div><div class="line">&#123;</div><div class="line">FILE *f1 = fopen(filename1, <span class="string">"r"</span>);</div><div class="line">FILE *f2 = fopen(filename2, <span class="string">"w"</span>);</div><div class="line"><span class="keyword">if</span> (f1 == <span class="literal">NULL</span> || f2 == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> sen[<span class="number">128</span>];</div><div class="line">Trienode *p, *t;</div><div class="line"><span class="keyword">int</span> len, startlen;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(f1, <span class="string">"%s"</span>, sen) != EOF) &#123;</div><div class="line">len = <span class="built_in">strlen</span>(sen);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">t = <span class="literal">NULL</span>;</div><div class="line">p = head;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j++) &#123;</div><div class="line"><span class="keyword">if</span> (sen[j] &gt;= <span class="string">'a'</span> &amp;&amp; sen[j] &lt;= <span class="string">'z'</span>) &#123;</div><div class="line"><span class="keyword">if</span> (p-&gt;child[sen[j] - <span class="string">'a'</span>] == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">p = p-&gt;child[sen[j] - <span class="string">'a'</span>];</div><div class="line"><span class="keyword">if</span> (p-&gt;scount &gt; <span class="number">0</span>) &#123;</div><div class="line">t = p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">if</span> (sen[j] &gt;= <span class="string">'A'</span> &amp;&amp; sen[j] &lt;= <span class="string">'Z'</span>) &#123;</div><div class="line"><span class="keyword">if</span> (p-&gt;child[sen[j] - <span class="string">'A'</span> + <span class="number">26</span>] == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">p = p-&gt;child[sen[j] - <span class="string">'A'</span> + <span class="number">26</span>];</div><div class="line"><span class="keyword">if</span> (p-&gt;scount &gt; <span class="number">0</span>) &#123;</div><div class="line">t = p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">p = head;</div><div class="line"><span class="keyword">while</span> (p != t) &#123;</div><div class="line"><span class="keyword">if</span> (sen[i] &gt;= <span class="string">'a'</span> &amp;&amp; sen[i] &lt;= <span class="string">'z'</span>) &#123;</div><div class="line">p = p-&gt;child[sen[i] - <span class="string">'a'</span>];</div><div class="line"><span class="built_in">fprintf</span>(f2, <span class="string">"%c"</span>, sen[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span> (sen[i] &gt;= <span class="string">'A'</span> &amp;&amp; sen[i] &lt;= <span class="string">'Z'</span>) &#123;</div><div class="line">p = p-&gt;child[sen[i] - <span class="string">'A'</span> + <span class="number">26</span>];</div><div class="line"><span class="built_in">fprintf</span>(f2, <span class="string">"%c"</span>, sen[i]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line">fputc(<span class="string">' '</span>, f2);</div><div class="line">i--;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fclose(f1);</div><div class="line">fclose(f2);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2016年复试上机题"><a href="#2016年复试上机题" class="headerlink" title="2016年复试上机题"></a>2016年复试上机题</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;文本文件input.txt由若干英文单词和分隔符（空格，回车，换行）构成。根据如下说明编写程序统计不同单词出现的次数（频度）。将统计结果按出现频度从高到低排序，并将出现频度大于5的单词及其频度输出到文件output.txt中。<br>&emsp;&emsp;说明：<br>&emsp;&emsp;(1)    多个连续的分隔符被视为一个分隔符。<br>&emsp;&emsp;(2)    单词大小写敏感。<br>&emsp;&emsp;(3)    每个单词的长度不超过20个字符。<br>&emsp;&emsp;(4)    单词的数量未知。如使用定义静态大数组的方式来统计，将被扣除5分。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;这个比起上面的保研题目就简单了很多。程序大概分为三个部分：<br>&emsp;&emsp;（1）读文件，保存成字典树。<br>&emsp;&emsp;（2）创建链表，进行排序。<br>&emsp;&emsp;（3）输出结果。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Trienode</div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> c;</div><div class="line">Trienode * child[<span class="number">52</span>];</div><div class="line"><span class="keyword">int</span> scount;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initNode</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i++) &#123;</div><div class="line">child[i] = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line">scount = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Wordnode</div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> wds[<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> wcount;</div><div class="line">Wordnode * next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Trienode * <span class="title">fileRead</span><span class="params">(<span class="keyword">char</span> filename[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortWord</span><span class="params">(Trienode * tnode, Wordnode * whead, <span class="keyword">char</span> w[], <span class="keyword">int</span> len)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showData</span><span class="params">(Wordnode * whead, <span class="keyword">char</span> filename[], <span class="keyword">int</span> k)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeSpace</span><span class="params">(Trienode * tnode)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeSpace</span><span class="params">(Wordnode * whead)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">Trienode * thead = fileRead(<span class="string">"d:\\input.txt"</span>);</div><div class="line"></div><div class="line">Wordnode * whead = (Wordnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Wordnode));</div><div class="line"><span class="keyword">char</span> w[<span class="number">20</span>];</div><div class="line"><span class="built_in">memset</span>(w, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(w));</div><div class="line">whead-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">52</span>; i++) &#123;</div><div class="line">sortWord(thead-&gt;child[i], whead, w, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">showData(whead, <span class="string">"d:\\out.txt"</span>, <span class="number">5</span>);</div><div class="line"><span class="comment">// 释放空间</span></div><div class="line">freeSpace(thead);</div><div class="line">freeSpace(whead);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Trienode * <span class="title">fileRead</span><span class="params">(<span class="keyword">char</span> filename[])</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">FILE * fp = fopen(filename, <span class="string">"r"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> word[<span class="number">20</span>];</div><div class="line">Trienode * head = (Trienode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Trienode));</div><div class="line">Trienode * p, *n;</div><div class="line">head-&gt;initNode();</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, word) != EOF) &#123;</div><div class="line">p = head;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; word[i] != <span class="string">'\0'</span>; i++) &#123;</div><div class="line"><span class="keyword">if</span> (word[i] &gt;= <span class="string">'a'</span>&amp;&amp;word[i] &lt;= <span class="string">'z'</span>) &#123;</div><div class="line"><span class="keyword">if</span> (p-&gt;child[word[i] - <span class="string">'a'</span>] == <span class="literal">NULL</span>) &#123;</div><div class="line">n = (Trienode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Trienode));</div><div class="line">n-&gt;c = word[i];</div><div class="line">n-&gt;initNode();</div><div class="line">p-&gt;child[word[i] - <span class="string">'a'</span>] = n;</div><div class="line">&#125;</div><div class="line">p = p-&gt;child[word[i] - <span class="string">'a'</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span> (word[i] &gt;= <span class="string">'A'</span>&amp;&amp;word[i] &lt;= <span class="string">'Z'</span>) &#123;</div><div class="line"><span class="keyword">if</span> (p-&gt;child[word[i] - <span class="string">'A'</span> + <span class="number">26</span>] == <span class="literal">NULL</span>) &#123;</div><div class="line">n = (Trienode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Trienode));</div><div class="line">n-&gt;c = word[i];</div><div class="line">n-&gt;initNode();</div><div class="line">p-&gt;child[word[i] - <span class="string">'A'</span> + <span class="number">26</span>] = n;</div><div class="line">&#125;</div><div class="line">p = p-&gt;child[word[i] - <span class="string">'A'</span> + <span class="number">26</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">p-&gt;scount++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fclose(fp);</div><div class="line"></div><div class="line"><span class="keyword">return</span> head;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortWord</span><span class="params">(Trienode * tnode, Wordnode * whead, <span class="keyword">char</span> w[], <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (tnode == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">Wordnode *p, *q;</div><div class="line">w[len] = tnode-&gt;c;</div><div class="line"><span class="keyword">if</span> (tnode-&gt;scount &gt; <span class="number">0</span>) &#123;</div><div class="line">q = whead;</div><div class="line">p = whead-&gt;next;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">if</span> (p-&gt;wcount &lt; tnode-&gt;scount) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">q = p;</div><div class="line">p = p-&gt;next;</div><div class="line">&#125;</div><div class="line">Wordnode *n = (Wordnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Wordnode));</div><div class="line"><span class="built_in">strcpy</span>(n-&gt;wds, w);</div><div class="line">n-&gt;wcount = tnode-&gt;scount;</div><div class="line">q-&gt;next = n;</div><div class="line">n-&gt;next = p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i++) &#123;</div><div class="line">sortWord(tnode-&gt;child[i], whead, w, len + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">w[len] = <span class="string">'\0'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showData</span><span class="params">(Wordnode * whead, <span class="keyword">char</span> filename[], <span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line">FILE * fp = fopen(filename, <span class="string">"w"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">Wordnode *p = whead-&gt;next;</div><div class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;wcount &gt; <span class="number">5</span>) &#123;</div><div class="line"><span class="built_in">fprintf</span>(fp,<span class="string">"%s，%d\n"</span>,p-&gt;wds,p-&gt;wcount);</div><div class="line">p = p-&gt;next;</div><div class="line">&#125;</div><div class="line">fclose(fp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeSpace</span><span class="params">(Trienode * tnode)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (tnode == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i++) &#123;</div><div class="line">freeSpace(tnode-&gt;child[i]);</div><div class="line">&#125;</div><div class="line"><span class="built_in">free</span>(tnode);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeSpace</span><span class="params">(Wordnode * whead)</span></span></div><div class="line">&#123;</div><div class="line">Wordnode * p = whead-&gt;next, *q = whead;</div><div class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">free</span>(q);</div><div class="line">q = p;</div><div class="line">p = p-&gt;next;</div><div class="line">&#125;</div><div class="line"><span class="built_in">free</span>(q);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2013复试上机"><a href="#2013复试上机" class="headerlink" title="2013复试上机"></a>2013复试上机</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>&emsp;&emsp;The project will read flight data from an input file and flight path requests from another input file and output the required information.</p><h4 id="Your-Task"><a href="#Your-Task" class="headerlink" title="Your Task"></a>Your Task</h4><p>&emsp;&emsp;Your program should determine if a particular destination airport can be reached from a particular originating airport within a particular number of hops.<br>&emsp;&emsp;A hop (leg of a flight) is a flight from one airport to another on the path between an originating and destination airports.<br>For example, the flight plan from PVG to PEK might be PVG → CAN → PEK. So PVG → CAN would be a hop and CAN → PEK would be a hop.</p><h4 id="Input-Data-Files"><a href="#Input-Data-Files" class="headerlink" title="Input Data Files"></a>Input Data Files</h4><p>Path Input File(PathInput.txt)<br>&emsp;&emsp;This input file will consist of a number of single origination/destination airport pairs (direct flights). The first line of the file will contain an integer representing the total number of pairs in the rest of the file.<br>6<br>[PVG, CAN]<br>[CAN, PEK]<br>[PVG, CTU]<br>[CTU, DLC]<br>[DLC, HAK]<br>[HAK, LXA]</p><p>Path Request File(PathRequest.txt)<br>&emsp;&emsp;This input file will contain a sequence of pairs of origination/destination airports and a max number of hops. The first line of the file will contain an integer representing the number of pairs in the file.<br>2<br>[PVG, DLC, 2]<br>[PVG, LXA, 2]</p><p>Output File(Output.txt)<br>&emsp;&emsp;For each pair in the Path Request File, your program should output the pair followed by “YES” or “NO” indicating that it is possible to get from the origination to destination airports within the max number of hops or it is not possible, respectively.<br>[PVG, DLC, YES]<br>[PVG, LXA, NO]</p><h4 id="Assumptions-you-can-make"><a href="#Assumptions-you-can-make" class="headerlink" title="Assumptions you can make:"></a>Assumptions you can make:</h4><p>You may make the following simplifying assumptions in your project:<br>&emsp;&emsp;C/C++ is allowed to be used.<br>&emsp;&emsp;All airport codes will be 3 letters and will be in all caps<br>&emsp;&emsp;Origination/destination pairs are unidirectional. To indicate that both directions of flight are possible, two entries would appear in the file. For example, [PVG, PEK] and [PEK, PVG] would have to be present in the file to indicate that one could fly from Shanghai to Beijing and from Beijing to Shanghai.</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;这是一道英文题目，但是总体上说不难理解。其实就是给一组路径数据，然后求解在给定距离大小内是否能到达目标结点。这有些像图里面的求解单源点的最短路径，但是题目中的图是一张无权图，所以求解会更简单一点。<br>&emsp;&emsp;程序大概分成以下几个部分：<br>&emsp;&emsp;（1）读文件，构造邻接矩阵。还需要有额外的矩阵保存城市名称和城市数量。当然这里用邻接表也可以。说到邻接矩阵，其实邻接矩阵本身可以用来求解，即邻接矩阵的$n$次方的第$i$行第$j$列的数字就是结点$i$到结点$j$走$n$步可以用的方案数。按理说可以用这种方法求解，但是关于矩阵的计算和保存我还没有仔细想。<br>&emsp;&emsp;（2）读需求文件，邻接矩阵深度优先遍历求解。一般来说无向图求解最短路径是用宽度优先遍历，但是这我用的C，不想自己写队列的函数，还有这道题并不要求求出最短路径长度，所以我用了深度优先遍历。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXCITY 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cityIndex</span><span class="params">(<span class="keyword">char</span> city[][<span class="number">4</span>], <span class="keyword">char</span> name[], <span class="keyword">int</span> citynum)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pathRead</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">int</span> matrix[][<span class="number">100</span>], <span class="keyword">char</span> city[][<span class="number">4</span>], <span class="keyword">int</span> * citynum)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isAvailable</span><span class="params">(<span class="keyword">int</span> matrix[][<span class="number">100</span>], <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> hops, <span class="keyword">int</span> citynum, <span class="keyword">int</span> maxhops, <span class="keyword">int</span> flag[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">requestRead</span><span class="params">(<span class="keyword">char</span> infile[], <span class="keyword">char</span> outfile[], <span class="keyword">int</span> matrix[][<span class="number">100</span>], <span class="keyword">char</span> city[][<span class="number">4</span>], <span class="keyword">int</span> citynum)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> matrix[MAXCITY][MAXCITY] = &#123; <span class="number">0</span> &#125;;<span class="comment">//邻接矩阵</span></div><div class="line"><span class="keyword">char</span> city[MAXCITY][<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> citynum = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> pathnum = pathRead(<span class="string">"PathInput.txt"</span>, matrix, city, &amp;citynum);</div><div class="line">requestRead(<span class="string">"PathRequest.txt"</span>, <span class="string">"Out.txt"</span>, matrix, city, citynum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pathRead</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">int</span> matrix[][<span class="number">100</span>], <span class="keyword">char</span> city[][<span class="number">4</span>], <span class="keyword">int</span> * citynum)</span></span></div><div class="line">&#123;</div><div class="line">FILE * fp = fopen(filename, <span class="string">"r"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> pathnum = <span class="number">0</span>;</div><div class="line"><span class="keyword">char</span> cityname[<span class="number">4</span>];</div><div class="line"><span class="keyword">char</span> temp;</div><div class="line"><span class="keyword">int</span> m, n;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">fscanf</span>(fp, <span class="string">"%d"</span>, &amp;pathnum) != EOF) &#123;</div><div class="line">temp = fgetc(fp);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pathnum; i++) &#123;</div><div class="line">temp = fgetc(fp);</div><div class="line">fgets(cityname, <span class="number">4</span>, fp);</div><div class="line"><span class="keyword">if</span> ((m = cityIndex(city, cityname, *citynum)) == <span class="number">-1</span>) &#123;</div><div class="line"><span class="built_in">strcpy</span>(city[* citynum], cityname);</div><div class="line">m = *citynum;;</div><div class="line">*citynum = *citynum + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">temp = fgetc(fp);</div><div class="line">temp = fgetc(fp);</div><div class="line">fgets(cityname, <span class="number">4</span>, fp);</div><div class="line">temp = fgetc(fp);</div><div class="line">temp = fgetc(fp);</div><div class="line"><span class="keyword">if</span> ((n = cityIndex(city, cityname, *citynum)) == <span class="number">-1</span>) &#123;</div><div class="line"><span class="built_in">strcpy</span>(city[*citynum], cityname);</div><div class="line">n = *citynum;</div><div class="line">*citynum = *citynum + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">matrix[m][n] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fclose(fp);</div><div class="line"></div><div class="line"><span class="keyword">return</span> pathnum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cityIndex</span><span class="params">(<span class="keyword">char</span> city[][<span class="number">4</span>], <span class="keyword">char</span> name[], <span class="keyword">int</span> citynum)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; citynum; i++) &#123;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(city[i], name) == <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">requestRead</span><span class="params">(<span class="keyword">char</span> infile[],<span class="keyword">char</span> outfile[],<span class="keyword">int</span> matrix[][<span class="number">100</span>],<span class="keyword">char</span> city[][<span class="number">4</span>],<span class="keyword">int</span> citynum)</span></span></div><div class="line">&#123;</div><div class="line">FILE * f1 = fopen(infile, <span class="string">"r"</span>);</div><div class="line">FILE * f2 = fopen(outfile, <span class="string">"w"</span>);</div><div class="line"><span class="keyword">if</span> (f1 == <span class="literal">NULL</span> || f2 == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> requestnum = <span class="number">0</span>;</div><div class="line"><span class="keyword">char</span> temp, cityname1[<span class="number">4</span>], cityname2[<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> m, n, maxhops;</div><div class="line"><span class="keyword">int</span> flag[MAXCITY];</div><div class="line"><span class="keyword">if</span> (<span class="built_in">fscanf</span>(f1, <span class="string">"%d"</span>, &amp;requestnum) != EOF) &#123;</div><div class="line">temp = fgetc(f1);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; requestnum; i++) &#123;</div><div class="line">temp = fgetc(f1);</div><div class="line">fgets(cityname1, <span class="number">4</span>, f1);</div><div class="line">temp = fgetc(f1);</div><div class="line">temp = fgetc(f1);</div><div class="line">fgets(cityname2, <span class="number">4</span>, f1);</div><div class="line">temp = fgetc(f1);</div><div class="line">temp = fgetc(f1);</div><div class="line"><span class="built_in">fscanf</span>(f1, <span class="string">"%d"</span>, &amp;maxhops);</div><div class="line">temp = fgetc(f1);</div><div class="line">temp = fgetc(f1);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ((m = cityIndex(city, cityname1, citynum)) == <span class="number">-1</span> || </div><div class="line">            (n = cityIndex(city, cityname2, citynum)) == <span class="number">-1</span>) &#123;</div><div class="line"><span class="built_in">fprintf</span>(f2, <span class="string">"[%s, %s, NO]\n"</span>, cityname1, cityname2);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">memset</span>(flag, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(flag));</div><div class="line"><span class="keyword">if</span> (isAvailable(matrix, m, n, <span class="number">1</span>, citynum, maxhops, flag)) &#123;</div><div class="line"><span class="built_in">fprintf</span>(f2, <span class="string">"[%s, %s, YES]\n"</span>, cityname1, cityname2);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">fprintf</span>(f2, <span class="string">"[%s, %s, NO]\n"</span>, cityname1, cityname2);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fclose(f1);</div><div class="line">fclose(f2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isAvailable</span><span class="params">(<span class="keyword">int</span> matrix[][<span class="number">100</span>], <span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> hops,<span class="keyword">int</span> citynum,<span class="keyword">int</span> maxhops,<span class="keyword">int</span> flag[])</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (hops &gt; maxhops) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (matrix[m][n] == <span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">flag[m] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; citynum; i++) &#123;</div><div class="line"><span class="keyword">if</span> (matrix[m][i] == <span class="number">1</span> &amp;&amp; flag[i] == <span class="number">0</span> &amp;&amp; </div><div class="line">        isAvailable(matrix, i, n, hops + <span class="number">1</span>, citynum, maxhops, flag)) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">flag[m] = <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2016年保研上机题&quot;&gt;&lt;a href=&quot;#2016年保研上机题&quot; class=&quot;headerlink&quot; title=&quot;2016年保研上机题&quot;&gt;&lt;/a&gt;2016年保研上机题&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="保研" scheme="http://115.159.44.202/categories/%E4%BF%9D%E7%A0%94/"/>
    
    
      <category term="C语言" scheme="http://115.159.44.202/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>2012-2014年上机复试题</title>
    <link href="http://115.159.44.202/2017/09/11/%E4%BF%9D%E7%A0%94/2012-2014%E5%B9%B4%E4%B8%8A%E6%9C%BA%E5%A4%8D%E8%AF%95%E9%A2%98/"/>
    <id>http://115.159.44.202/2017/09/11/保研/2012-2014年上机复试题/</id>
    <published>2017-09-11T01:51:29.000Z</published>
    <updated>2017-09-13T04:45:22.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2012年上机题"><a href="#2012年上机题" class="headerlink" title="2012年上机题"></a>2012年上机题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;从服务器上下载数据文件org.dat文件以二进制方式存放一系列整数，每个整数占4个字节。从第一个整数开始，第一个整数和第二个整数构成一个坐标点，依次类推，数据文件中保存了许多坐标点数据。<br>&emsp;&emsp;问题1：<br>&emsp;&emsp;规定处于第一象限的坐标点为有效点，请问数据文件中所有点的个数n为多少？有效点的个数k为多少？<br>&emsp;&emsp;问题2：<br>&emsp;&emsp;每个有效点与坐标原点构成一个的矩形，请问k个有效点与坐标原点构成的k个矩形的最小公共区域面积为多少？<br>&emsp;&emsp;问题3：<br>&emsp;&emsp;寻找有效点中符合下列条件的点：以该点为坐标原点，其他有效点仍然是有效点即处于第一象限（不包括坐标轴上的点）。输出这些点。<br>&emsp;&emsp;问题4：<br>&emsp;&emsp;对所有有效点进行分组，每个有效点有且只能属于一个分组，分组内的点符合下列规则：若对组内所有点的x坐标进行排序，点p1（x1，y1）在点p2（x2，y2）后面，即x1&gt;x2那么y1&gt;y2.请输出所有的分组。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;我看到有的代码是分题做的，这样更好给分，但是我就混在一起了，因为有些功能可以同时完成。<br>&emsp;&emsp;我大概分成下面几个部分：<br>&emsp;&emsp;（1）读文件，求出n和k，保存有效点。<br>&emsp;&emsp;（2）以x的的大小由小到大进行排序。经过简单处理。可以得到最小公共面积和问题三所求的点。<br>&emsp;&emsp;（3）分组。我就遍历了，对每个点给了一个符号位。时间复杂度比较高。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileRead</span><span class="params">(FILE * fp, <span class="keyword">int</span> num[][<span class="number">2</span>], <span class="keyword">int</span> *k, <span class="keyword">int</span> * n)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findMinSquare</span><span class="params">(<span class="keyword">int</span> num[][<span class="number">2</span>], <span class="keyword">int</span> k)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">divideGroup</span><span class="params">(<span class="keyword">int</span> num[][<span class="number">2</span>], <span class="keyword">int</span> k, <span class="keyword">int</span> group[])</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">FILE * fp = fopen(<span class="string">"org.dat"</span>, <span class="string">"rb"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 造数据文件，coor.txt中已经存放了一些数据</span></div><div class="line"><span class="comment">//FILE * fp = fopen("org.dat", "wb");</span></div><div class="line"><span class="comment">//FILE * f2 = fopen("coor.txt","r");</span></div><div class="line"><span class="comment">//if (fp == NULL || f2==NULL) &#123;</span></div><div class="line"><span class="comment">//printf("FILE OPEN ERROR!\n");</span></div><div class="line"><span class="comment">//exit(1);</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//int t;</span></div><div class="line"><span class="comment">//while (fscanf(f2, "%d", &amp;t) != EOF) &#123;</span></div><div class="line"><span class="comment">//fwrite(&amp;t, sizeof(int), 1, fp);</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//fclose(f2);</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> num[<span class="number">1000</span>][<span class="number">2</span>], k = <span class="number">0</span>, n = <span class="number">0</span>, groupnum;</div><div class="line"><span class="keyword">int</span> group[<span class="number">100</span>];</div><div class="line"></div><div class="line">fileRead(fp, num, &amp;k, &amp;n);</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"所有点的个数为：%d\n"</span>, n);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"支配点的个数为：%d\n"</span>, k);</div><div class="line"></div><div class="line">qsort(num, k, <span class="keyword">sizeof</span>(num[<span class="number">0</span>]), cmp);</div><div class="line">findMinSquare(num, k);</div><div class="line"></div><div class="line"><span class="built_in">memset</span>(group, <span class="number">-1</span>, <span class="keyword">sizeof</span>(group));</div><div class="line">groupnum = divideGroup(num, k, group);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"共分为%d组，具体如下：\n"</span>, groupnum);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; groupnum; i++) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"第%d组点为："</span>, groupnum);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</div><div class="line"><span class="keyword">if</span> (group[j] == i) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">" (%d, %d)"</span>, num[j][<span class="number">0</span>], num[j][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fclose(fp);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileRead</span><span class="params">(FILE * fp, <span class="keyword">int</span> num[][<span class="number">2</span>], <span class="keyword">int</span> *k, <span class="keyword">int</span> * n)</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x, y;</div><div class="line"><span class="keyword">while</span> (fread(&amp;x, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, fp) &amp;&amp; fread(&amp;y, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, fp)) &#123;</div><div class="line">*n = *n + <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span>) &#123;</div><div class="line">num[*k][<span class="number">0</span>] = x;</div><div class="line">num[*k][<span class="number">1</span>] = y;</div><div class="line">*k = *k + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> ((<span class="keyword">int</span> *)a)[<span class="number">0</span>] - ((<span class="keyword">int</span> *)b)[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findMinSquare</span><span class="params">(<span class="keyword">int</span> num[][<span class="number">2</span>], <span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> minx, miny;</div><div class="line"><span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"最小公共面积是：%d\n"</span>, num[<span class="number">0</span>][<span class="number">0</span>] * num[<span class="number">0</span>][<span class="number">1</span>]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"符合要求的点的坐标为：(%d, %d)"</span>, num[<span class="number">0</span>][<span class="number">0</span>], num[<span class="number">0</span>][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span> (num[<span class="number">0</span>][<span class="number">0</span>] &lt; num[<span class="number">1</span>][<span class="number">0</span>] &amp;&amp; num[<span class="number">0</span>][<span class="number">1</span>] &lt; num[<span class="number">1</span>][<span class="number">1</span>]) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"最小公共面积是：%d\n"</span>, num[<span class="number">0</span>][<span class="number">0</span>] * num[<span class="number">0</span>][<span class="number">1</span>]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"符合要求的点的坐标为：(%d, %d)\n"</span>, num[<span class="number">0</span>][<span class="number">0</span>], num[<span class="number">0</span>][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">minx = num[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">miny = num[<span class="number">0</span>][<span class="number">1</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</div><div class="line"><span class="keyword">if</span> (minx &gt; num[i][<span class="number">0</span>]) &#123;</div><div class="line">minx = num[i][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (miny &gt; num[i][<span class="number">1</span>]) &#123;</div><div class="line">minx = num[i][<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"最小公共面积是：%d\n"</span>, minx * miny);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"没有符合要求的点的坐标。\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">divideGroup</span><span class="params">(<span class="keyword">int</span> num[][<span class="number">2</span>], <span class="keyword">int</span> k, <span class="keyword">int</span> group[])</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> groupnum = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> tx, ty;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (group[i] == <span class="number">-1</span>) &#123;</div><div class="line">group[i] = groupnum;</div><div class="line"></div><div class="line">tx = num[i][<span class="number">0</span>];</div><div class="line">ty = num[i][<span class="number">1</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; k; j++) &#123;</div><div class="line"><span class="keyword">if</span> (group[j] == <span class="number">-1</span> &amp;&amp; num[j][<span class="number">0</span>] &gt; tx &amp;&amp; num[j][<span class="number">1</span>] &gt; ty) &#123;</div><div class="line">group[j] = groupnum;</div><div class="line">tx = num[j][<span class="number">0</span>];</div><div class="line">ty = num[j][<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">groupnum++;;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> groupnum;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2013年上机题"><a href="#2013年上机题" class="headerlink" title="2013年上机题"></a>2013年上机题</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;二进制数据文件1.bin中存放了100000个样本点，每个样本点由4个属性构成，属性均为整型。<br>&emsp;&emsp;定义：    如a点的k个属性不比b点的对应属性差（属性值越小越好），<br>&emsp;&emsp;且a点至少有一个属性比b点的对应属性好，则称a点k-支配b点。<br>&emsp;&emsp;要求：    求出不被任何点k-支配的样本点的个数。<br>&emsp;&emsp;在试卷上填写求出的样本点个数和所用时间（Elapsed Time）。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;这道题看上去不难，但是倒是花费了我不少的时间，其中有许多大大小小的bug。先简单介绍一下程序的几个部分：<br>&emsp;&emsp;（1）计时（这个已经写好了）<br>&emsp;&emsp;（2）读取文件中的数据并保存。<br>&emsp;&emsp;（3）遍历数组，寻找不被控制的数据。<br>&emsp;&emsp;我原来打算直接开一个$100000*4$的数组来保存数据，但是报了stack overflow的错，我查了下，说是栈的默认大小是1M，这明显超过了。我就决定用结构体+手动分配内存，但是没想到保存结构体指针的数组也超过了内存限制（原谅我没算）。后来发现只要开成全局变量就好了。<br>&emsp;&emsp;考虑到数据有100000个，昨天丁大佬说10000个数据的话复杂度为$n^2$就有些大了，我就考虑到能不能减少时间复杂度。着就想到了链表。最开始的构想是两层遍历，去掉被控制的点。后来想到为了减少比较的次数，可以设置标志位。既然说到了标志位，就想到不如直接用链表删掉被控制的点就好了。这个算法的时间复杂度我没有求，但是最好情况是$O(n)$，最坏情况是$O(n^2)$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100000</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">LARGE_INTEGER m_nFreq;</div><div class="line">LARGE_INTEGER m_nBeginTime;</div><div class="line">LARGE_INTEGER m_nEndTime;</div><div class="line"></div><div class="line">QueryPerformanceFrequency(&amp;m_nFreq);</div><div class="line">QueryPerformanceCounter(&amp;m_nBeginTime);</div><div class="line"></div><div class="line">run();</div><div class="line"></div><div class="line">QueryPerformanceCounter(&amp;m_nEndTime);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\nElapsed Time = %lf sec\n"</span>,(<span class="keyword">double</span>)(m_nEndTime.QuadPart-m_nBeginTime.QuadPart)/m_nFreq.QuadPart);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Dot</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> pos[<span class="number">4</span>];</div><div class="line">Dot * next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dataRead</span><span class="params">(FILE * fp, Dot * head)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eraseControlDot</span><span class="params">(Dot * head, <span class="keyword">int</span> * count)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeSpace</span><span class="params">(Dot * head)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">FILE * fp = fopen(<span class="string">"1.bin"</span>, <span class="string">"rb"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Dot * head = (Dot *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Dot));</div><div class="line">head-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> count = dataRead(fp, head);</div><div class="line">eraseControlDot(head, &amp;count);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, count);</div><div class="line"></div><div class="line">   freeSpace(head);</div><div class="line">   </div><div class="line">fclose(fp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dataRead</span><span class="params">(FILE * fp, Dot * head)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> a, b, c, d;</div><div class="line">Dot * node, *p = head;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (fread(&amp;a, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, fp) &amp;&amp; fread(&amp;b, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, fp) &amp;&amp; fread(&amp;c, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, fp) &amp;&amp;</div><div class="line">    fread(&amp;d, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, fp ) &amp;&amp; count &lt; MAXSIZE) &#123;</div><div class="line">node = (Dot *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Dot));</div><div class="line">node-&gt;pos[<span class="number">0</span>] = a;</div><div class="line">node-&gt;pos[<span class="number">1</span>] = b;</div><div class="line">node-&gt;pos[<span class="number">2</span>] = c;</div><div class="line">node-&gt;pos[<span class="number">3</span>] = d;</div><div class="line">node-&gt;next = <span class="literal">NULL</span>;</div><div class="line">p-&gt;next = node;</div><div class="line">p = node;</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eraseControlDot</span><span class="params">(Dot * head, <span class="keyword">int</span> * count)</span></span></div><div class="line">&#123;</div><div class="line">Dot *p, *q, *current;</div><div class="line"><span class="keyword">if</span> (*count &gt; <span class="number">0</span>) &#123;</div><div class="line">current = head-&gt;next;</div><div class="line"><span class="keyword">while</span>(current != <span class="literal">NULL</span>) &#123;</div><div class="line">q = head;</div><div class="line">p = head-&gt;next;</div><div class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">if</span> (p-&gt;pos[<span class="number">0</span>] &gt;= current-&gt;pos[<span class="number">0</span>] &amp;&amp; p-&gt;pos[<span class="number">1</span>] &gt;= current-&gt;pos[<span class="number">1</span>] &amp;&amp; </div><div class="line">                p-&gt;pos[<span class="number">2</span>] &gt;= current-&gt;pos[<span class="number">2</span>]&amp;&amp; p-&gt;pos[<span class="number">3</span>] &gt;= current-&gt;pos[<span class="number">3</span>] </div><div class="line">                &amp;&amp;(p-&gt;pos[<span class="number">0</span>] &gt; current-&gt;pos[<span class="number">0</span>] || p-&gt;pos[<span class="number">1</span>] &gt; current-&gt;pos[<span class="number">1</span>] </div><div class="line">                || p-&gt;pos[<span class="number">2</span>] &gt; current-&gt;pos[<span class="number">2</span>] || p-&gt;pos[<span class="number">3</span>] &gt; current-&gt;pos[<span class="number">3</span>])) &#123;</div><div class="line">q-&gt;next = p-&gt;next;</div><div class="line"><span class="built_in">free</span>(p);</div><div class="line">p = q-&gt;next;</div><div class="line">*count = *count - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">p = p-&gt;next;</div><div class="line">q = q-&gt;next;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">current = current-&gt;next;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeSpace</span><span class="params">(Dot * head)</span></span></div><div class="line">&#123;</div><div class="line">Dot *p, *q;</div><div class="line">p = head-&gt;next;</div><div class="line">q = head;</div><div class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">free</span>(q);</div><div class="line">q = p;</div><div class="line">p = p-&gt;next;</div><div class="line">&#125;</div><div class="line"><span class="built_in">free</span>(p);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2014年上机题"><a href="#2014年上机题" class="headerlink" title="2014年上机题"></a>2014年上机题</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;input.bin中有10000组数据，每组数据有4个属性，都为整型。定义邻近点为拥有k个距离小于等于d的点的点，$d=\sqrt{(b_1-a_1)*(b_1-a_1)+(b_2-a_2)*(b_2-a_2)+(b_3-a_3)*(b_3-a_3)+(b_4-a_4)*(b_4-a_4)}$;现定义k=10，d=7500，显示出符合点的编号及其各个属性。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;这道题就是两次循环求解，不难，但是数据量比较大，时间比较长。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAYSIZE 10000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Dot &#123;</div><div class="line"><span class="keyword">int</span> pos[<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> ngb;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initDot</span><span class="params">()</span> </span>&#123;</div><div class="line">ngb = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;points[ARRAYSIZE];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fileRead</span><span class="params">(FILE *fp)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">countNeighbour</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">double</span> distance)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showResult</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> k)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">LARGE_INTEGER m_nFreq;</div><div class="line">LARGE_INTEGER m_nBeginTime;</div><div class="line">LARGE_INTEGER m_nEndTime;</div><div class="line"></div><div class="line">QueryPerformanceFrequency(&amp;m_nFreq);</div><div class="line">QueryPerformanceCounter(&amp;m_nBeginTime);</div><div class="line"></div><div class="line">FILE * fp = fopen(<span class="string">"1.bin"</span>, <span class="string">"rb"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> k=<span class="number">10</span>;</div><div class="line"><span class="keyword">double</span> distance=<span class="number">7500</span>;</div><div class="line"><span class="comment">//printf("请输入k和距离：");</span></div><div class="line"><span class="comment">//scanf("%d%lf", &amp;k, &amp;distance);</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> count = fileRead(fp);</div><div class="line">countNeighbour(count, distance);</div><div class="line">showResult(count, k);</div><div class="line"></div><div class="line">fclose(fp);</div><div class="line"></div><div class="line">QueryPerformanceCounter(&amp;m_nEndTime);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\nElapsed Time=%lf sec\n"</span>,(<span class="keyword">double</span>)(m_nEndTime.QuadPart-m_nBeginTime.QuadPart)/m_nFreq.QuadPart);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fileRead</span><span class="params">(FILE *fp)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> num[<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (fread(num, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">4</span>, fp) &amp;&amp; count &lt; ARRAYSIZE) &#123;</div><div class="line">points[count].initDot();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">points[count].pos[i] = num[i];</div><div class="line">&#125;</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">countNeighbour</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">double</span> distance)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; count; j++) &#123;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">sqrt</span>((<span class="keyword">double</span>)((points[i].pos[<span class="number">0</span>]-points[j].pos[<span class="number">0</span>])*(points[i].pos[<span class="number">0</span>]-points[j].pos[<span class="number">0</span>])</div><div class="line">            +(points[i].pos[<span class="number">1</span>] - points[j].pos[<span class="number">1</span>])*(points[i].pos[<span class="number">1</span>] - points[j].pos[<span class="number">1</span>]) </div><div class="line">            +(points[i].pos[<span class="number">2</span>] - points[j].pos[<span class="number">2</span>])*(points[i].pos[<span class="number">2</span>] - points[j].pos[<span class="number">2</span>]) + </div><div class="line">            (points[i].pos[<span class="number">3</span>] - points[j].pos[<span class="number">3</span>])*(points[i].pos[<span class="number">3</span>] - points[j].pos[<span class="number">3</span>]))) &lt; distance) </div><div class="line">        &#123;</div><div class="line">points[i].ngb++;</div><div class="line">points[j].ngb++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showResult</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line"><span class="keyword">if</span> (points[i].ngb == k) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"第%d个点:(%d,%d,%d,%d)\n"</span>,i,points[i].pos[<span class="number">0</span>], points[i].pos[<span class="number">1</span>], points[i].pos[<span class="number">2</span>], </div><div class="line">            points[i].pos[<span class="number">3</span>]);</div><div class="line">flag = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (flag) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"没有符合要求的点。\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2012年上机题&quot;&gt;&lt;a href=&quot;#2012年上机题&quot; class=&quot;headerlink&quot; title=&quot;2012年上机题&quot;&gt;&lt;/a&gt;2012年上机题&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="保研" scheme="http://115.159.44.202/categories/%E4%BF%9D%E7%A0%94/"/>
    
    
      <category term="C语言" scheme="http://115.159.44.202/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>2009-2011年上机复试题</title>
    <link href="http://115.159.44.202/2017/09/10/%E4%BF%9D%E7%A0%94/2009-2011%E5%B9%B4%E4%B8%8A%E6%9C%BA%E5%A4%8D%E8%AF%95%E9%A2%98/"/>
    <id>http://115.159.44.202/2017/09/10/保研/2009-2011年上机复试题/</id>
    <published>2017-09-10T01:35:29.000Z</published>
    <updated>2017-09-13T04:35:44.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2009年上机复试题"><a href="#2009年上机复试题" class="headerlink" title="2009年上机复试题"></a>2009年上机复试题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;（1）用IE浏览器从FTP上下载org.dat，并保存在D盘的根目录下。<br>&emsp;&emsp;（2）此文件中按文本方式存放了一段其他文章，其中有若干长度小于15的十 进制或八进制数字，数字之间用“,”分开，数字内部存在且仅存在空格。<br>&emsp;&emsp;（3）八进制数以起始位“0”作为标示与十进制数区分。<br>&emsp;&emsp;（4）顺序读取这些数字将他们转变为十进制数后按从大到小的顺序排序后，输 出到D盘根目录下new.txt，每个数字一行。 eg：_235_,34_2,_043_1_,1_3 分别是：十进制235，十进制342.，八进制431，十进制13。_代表空格。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">charToDec</span><span class="params">(<span class="keyword">char</span> word[], <span class="keyword">int</span> m)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">FILE * fp1 = fopen(<span class="string">"org.dat"</span>, <span class="string">"r"</span>);</div><div class="line">FILE * fp2 = fopen(<span class="string">"D:/new.txt"</span>, <span class="string">"w"</span>);</div><div class="line"><span class="keyword">if</span> (fp1 == <span class="literal">NULL</span> || fp2 == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> num[<span class="number">1000</span>];</div><div class="line"><span class="keyword">char</span> word[<span class="number">20</span>];</div><div class="line"><span class="keyword">char</span> letter;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>, len = <span class="number">0</span>, val;</div><div class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>, first=<span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="built_in">memset</span>(word, <span class="string">'\0'</span>, <span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line"><span class="keyword">while</span> ((letter = fgetc(fp1)) != EOF) &#123;</div><div class="line"><span class="keyword">if</span> (letter == <span class="string">','</span>) &#123;</div><div class="line"><span class="keyword">if</span> (flag) &#123;</div><div class="line">val = charToDec(word, <span class="number">8</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">val = charToDec(word, <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">memset</span>(word, <span class="string">'\0'</span>, <span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">len = <span class="number">0</span>;</div><div class="line">num[count] = val;</div><div class="line">count++;</div><div class="line">first = <span class="literal">true</span>;</div><div class="line">flag = <span class="literal">false</span>;</div><div class="line">val = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span> (letter &gt;= <span class="string">'0'</span> &amp;&amp; letter &lt;= <span class="string">'9'</span>) &#123;</div><div class="line"><span class="keyword">if</span> (first) &#123;</div><div class="line"><span class="keyword">if</span> (letter == <span class="string">'0'</span>) &#123;</div><div class="line">flag = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">word[len] = letter;</div><div class="line">len++;</div><div class="line">first = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">word[len] = letter;</div><div class="line">len++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (flag) &#123;</div><div class="line">val = charToDec(word, <span class="number">8</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">val = charToDec(word, <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">num[count] = val;</div><div class="line">count++;</div><div class="line"></div><div class="line">qsort(num,count,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),cmp);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line"><span class="built_in">fprintf</span>(fp2, <span class="string">"%d\n"</span>, num[i]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">charToDec</span><span class="params">(<span class="keyword">char</span> word[], <span class="keyword">int</span> m)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; word[i] != <span class="string">'\0'</span>; i++) &#123;</div><div class="line">n = n * m + word[i] - <span class="string">'0'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> *(<span class="keyword">int</span> *)a &lt; *(<span class="keyword">int</span> *)b ? <span class="number">1</span> : <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2010年上机复试题"><a href="#2010年上机复试题" class="headerlink" title="2010年上机复试题"></a>2010年上机复试题</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;(1)FTP上下载make.exe和org.dat，运行make.exe输入准考证后三位生成data.txt，文件为二进制编码<br>&emsp;&emsp;(2)data.txt内存有2048个整数，其中前n个为非0数，后2048-n个数为0，将其读入数组，计算非零数的个数n<br>&emsp;&emsp;(3)选出n个数中的最大数&amp;最小数<br>&emsp;&emsp;(4)选出n个数中最大素数<br>&emsp;&emsp;(5)将n个数从大到小排序，并平均分成3段（若n非3的整数倍，则不考虑最后的1~2个数），选出中间段的最大数和最小数</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAYSIZE 2048</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileRead</span><span class="params">(FILE * fp, <span class="keyword">int</span> num[], <span class="keyword">int</span> * n)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> * a, <span class="keyword">const</span> <span class="keyword">void</span> * b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPreimer</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">FILE * fp = fopen(<span class="string">"data.txt"</span>, <span class="string">"rb"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num[ARRAYSIZE], maxnum, minnum, maxpreimer, n;</div><div class="line">n = <span class="number">0</span>;</div><div class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</div><div class="line"></div><div class="line">fileRead(fp, num, &amp;n);</div><div class="line"></div><div class="line"><span class="comment">//for (int i = 1; i &lt; 1025; i++) &#123;</span></div><div class="line"><span class="comment">//fwrite(&amp;i, sizeof(int), 1, fp);</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//int j = 0;</span></div><div class="line"><span class="comment">/*for (int i = 0; i &lt; 1024; i++)</span></div><div class="line">&#123;</div><div class="line">fwrite(&amp;i, sizeof(int), 1, fp);</div><div class="line">&#125;*/</div><div class="line"></div><div class="line">qsort(num, n, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp);</div><div class="line">maxnum = num[<span class="number">0</span>];</div><div class="line">minnum = num[n - <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line"><span class="keyword">if</span> (isPreimer(num[i])) &#123;</div><div class="line">maxpreimer = num[i];</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"非零数字个数为：%d\n"</span>, n);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"其中最大数为：%d\n"</span>, maxnum);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"其中最小数为：%d\n"</span>, minnum);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"其中最大素数为：%d\n"</span>, maxpreimer);</div><div class="line"></div><div class="line">n = n - n % <span class="number">3</span>;</div><div class="line">maxnum = num[n / <span class="number">3</span>];</div><div class="line">minnum = num[n / <span class="number">3</span> * <span class="number">2</span> - <span class="number">1</span>];</div><div class="line"><span class="built_in">printf</span>(<span class="string">"中间段最大数为：%d\n"</span>, maxnum);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"中间段最小数为：%d\n"</span>, minnum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileRead</span><span class="params">(FILE * fp, <span class="keyword">int</span> num[], <span class="keyword">int</span> * n)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> temp;</div><div class="line"><span class="keyword">while</span> (fread(&amp;temp, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, fp) &amp;&amp; *n &lt; ARRAYSIZE) &#123;</div><div class="line"><span class="keyword">if</span> (temp != <span class="number">0</span>) &#123;</div><div class="line">num[*n] = temp;</div><div class="line">*n = *n + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> * a, <span class="keyword">const</span> <span class="keyword">void</span> * b)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> (*(<span class="keyword">int</span> *)b - *(<span class="keyword">int</span> *)a);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPreimer</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; (<span class="built_in">sqrt</span>(n*<span class="number">1.0</span>) + <span class="number">1</span>); i++) &#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> == n%i) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2011年上机复试题"><a href="#2011年上机复试题" class="headerlink" title="2011年上机复试题"></a>2011年上机复试题</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;第一道：输出1000~9999中满足一下条件的所有数：<br>&emsp;&emsp;(1)该数是素数<br>&emsp;&emsp;(2)十位数和个位数组成的数是素数，百位数和个位数组成的数是素数<br>&emsp;&emsp;(3)千位数和百位数组成的数是素数，千位数和十位数组成的数是素数<br>&emsp;&emsp;第二道：<br>&emsp;&emsp;从ftp上下载一个文本info.txt，其中是一段关于计算机历史的英文文档（不过是加过密的，打开看全是乱码），<br>&emsp;&emsp;要求密钥cip1和cip2以及解密后的第一个句子。条件：<br>&emsp;&emsp;(1)cip1和cip2都是八位无符号整数；<br>&emsp;&emsp;(2)加密过程：每次从文本中读出八位字符，然后将该字符和密钥交替异或便是该位置的密文。<br>&emsp;&emsp;如第1个字节与cip1异或，第2个字节和cip2异或，第3个字节和cip1异或，。。。，如此循环至结束。<br>&emsp;&emsp;最后输出cip1和cip2以及第一段完整的英文句子。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;第一题不难，只要区分好怎么求一个数的个十百千位就好。第二题我一开始抓到有点懵，似乎有点是n-1个条件求解n个数，这个明显不能求得唯一解啊。但是好在题目给了另外一个条件就是八位无符号整数，那就全都试一遍就好了。在有无符号方面我出了一些bug，毕竟不太熟悉。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPreimer</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findCode</span><span class="params">(<span class="keyword">char</span> letters[], <span class="keyword">int</span> n, <span class="keyword">char</span> *cip1, <span class="keyword">char</span> * cip2)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLegalWord</span><span class="params">(<span class="keyword">char</span> c)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">// 第一题</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1000</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line"><span class="keyword">if</span> (isPreimer(i) &amp;&amp; isPreimer(i % <span class="number">100</span> / <span class="number">10</span> + i % <span class="number">10</span>) &amp;&amp; isPreimer(i % <span class="number">1000</span> / <span class="number">100</span> + i % <span class="number">10</span>) &amp;&amp; </div><div class="line">        isPreimer(i / <span class="number">1000</span> + i % <span class="number">1000</span> / <span class="number">100</span>) &amp;&amp; isPreimer(i / <span class="number">1000</span> + i % <span class="number">100</span> / <span class="number">10</span>)) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 第二题</span></div><div class="line"><span class="comment">// 生成数据文件</span></div><div class="line"><span class="comment">/*FILE * fp1 = fopen("data.txt","w");</span></div><div class="line">FILE * fp2 = fopen("result.txt", "r");</div><div class="line">if (fp1 == NULL || fp2==NULL) &#123;</div><div class="line">printf("FILE OPEN ERROR!\n");</div><div class="line">exit(1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">char cip1 = 22, cip2 = 10;</div><div class="line">char t;</div><div class="line">int count = 1;</div><div class="line"></div><div class="line">while (fscanf(fp2, "%c", &amp;t) != EOF) &#123;</div><div class="line">if (count % 2 == 1) &#123;</div><div class="line">t = t^cip1;</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">t = t^cip2;</div><div class="line">&#125;</div><div class="line">fprintf(fp1,"%c",t);</div><div class="line">count++;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line">FILE * fp = fopen(<span class="string">"data.txt"</span>, <span class="string">"r"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> letters[<span class="number">10000</span>];</div><div class="line"><span class="keyword">char</span> t;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="built_in">memset</span>(letters, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(letters));</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp, <span class="string">"%c"</span>, &amp;t) != EOF) &#123;</div><div class="line">letters[count++] = t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> cip1, cip2;</div><div class="line">findCode(letters, count, &amp;cip1, &amp;cip2);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">letters[i] = letters[i] ^ cip1;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">letters[i] = letters[i] ^ cip2;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"cip1:%d\ncip2:%d\n"</span>, cip1, cip2);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, letters);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPreimer</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; (<span class="built_in">sqrt</span>(n*<span class="number">1.0</span>) + <span class="number">1</span>); i++) &#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> == n%i) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findCode</span><span class="params">(<span class="keyword">char</span> letters[], <span class="keyword">int</span> n, <span class="keyword">char</span> *cip1, <span class="keyword">char</span> * cip2)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> t;</div><div class="line"><span class="keyword">int</span> j;</div><div class="line"><span class="keyword">bool</span> flag1 = <span class="literal">true</span>, flag2 = <span class="literal">true</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">char</span> i = <span class="number">0</span>; i &gt;= <span class="number">0</span> &amp;&amp; i &lt; <span class="number">256</span>; i++) &#123;</div><div class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n &amp;&amp; flag1; j = j + <span class="number">2</span>) &#123;</div><div class="line">t = i^letters[j];</div><div class="line"><span class="keyword">if</span> (!isLegalWord(t)) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (j &gt;= n) &#123;</div><div class="line">*cip1 = i;</div><div class="line">flag1 = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; n &amp;&amp; flag2; j = j + <span class="number">2</span>) &#123;</div><div class="line">t = i^letters[j];</div><div class="line"><span class="keyword">if</span> (!isLegalWord(t)) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (j &gt;= n) &#123;</div><div class="line">*cip2 = i;</div><div class="line">flag2 = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLegalWord</span><span class="params">(<span class="keyword">char</span> c)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> ((c &lt;= <span class="string">'z'</span>&amp;&amp;c &gt;= <span class="string">'a'</span>) || (c &lt;= <span class="string">'Z'</span>&amp;&amp;c &gt;= <span class="string">'A'</span>) || c == <span class="string">','</span> || c == <span class="string">'.'</span> || c == <span class="string">'?'</span> || c == <span class="string">';'</span> || c == <span class="string">':'</span> </div><div class="line">    || c == <span class="string">'!'</span> || c == <span class="string">'\\'</span> || c == <span class="string">'\''</span> || c == <span class="string">'-'</span> || c == <span class="string">'('</span> || c == <span class="string">')'</span> || c == <span class="string">' '</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2009年上机复试题&quot;&gt;&lt;a href=&quot;#2009年上机复试题&quot; class=&quot;headerlink&quot; title=&quot;2009年上机复试题&quot;&gt;&lt;/a&gt;2009年上机复试题&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="保研" scheme="http://115.159.44.202/categories/%E4%BF%9D%E7%A0%94/"/>
    
    
      <category term="C语言" scheme="http://115.159.44.202/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>2008年上机复试题</title>
    <link href="http://115.159.44.202/2017/09/09/%E4%BF%9D%E7%A0%94/2008%E5%B9%B4%E4%B8%8A%E6%9C%BA%E5%A4%8D%E8%AF%95%E9%A2%98/"/>
    <id>http://115.159.44.202/2017/09/09/保研/2008年上机复试题/</id>
    <published>2017-09-09T10:49:29.000Z</published>
    <updated>2017-09-13T04:25:55.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2008年上机复试题"><a href="#2008年上机复试题" class="headerlink" title="2008年上机复试题"></a>2008年上机复试题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>（1）用IE从FTP上下载org.dat，并保存在D盘的根目录中。<br>（2）此文件中按文本方式存放了一段其他文章，其中有若干长度小于15的英 文单词，单词之间用空格分开，无其他符号。<br>（3）顺序读取这段文章的不同的单词（大小写敏感），同时在读取的过程中排除 所有的单词THE以及变形，即这些单词不能出现在读取的结果中。<br>（4）将读取的所有单词的首字母转大写后，输出D根目录下new.txt，每个单词一行。<br>那段文字可以点右键打开方式中用记事本打开，内容是：<br>The constructor is used to initialize the object The destructor is used to delete the Object the calling sequence of constructor is opposite to the calling sequence of destructor<br>运行结果是：<br>Constructor<br>Is<br>Used<br>To<br>Initialize<br>Object<br>Destructor<br>Delete<br>Object<br>Calling<br>Seqence<br>Of<br>Opposite</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>&emsp;&emsp;不知道我为什么看到这样的题目第一个反应就是字典树。因为我的C语言写的十分不熟练，所以这种难一点的对我来说就有了无数的Bug。一般的数组也是可以，思想还简单一点，学长给了代码。好像集合也是可以做，但是考虑到可能只给我们用C（虽然他说C++也是可以的，但是我不信），所以最后还是基本用了C。<br>&emsp;&emsp;用字典树的话这道题分成三个部分：<br>&emsp;&emsp;（1）读单词并建树（丁大佬教育我这两个应该分开）：将读到的单词保存，并将它的小写形式与”the”比较。如果不一样的就加入到字典树中。我额外给了一个scount变量表示这个单词有多少个。<br>&emsp;&emsp;（2）字典树遍历：递归遍历字典树，对所有的单词先转换为小写，然后将首字母转为大写输出。<br>&emsp;&emsp;（3）删除字典树并释放指针：递归删除，有点像后序遍历。<br>&emsp;&emsp;需要注意的是一开始读文章中的字母大小写是敏感的，所以一开始建树的时候只能保存单词的原型。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Trienode</div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> sletter;</div><div class="line"><span class="keyword">int</span> scount;</div><div class="line">Trienode * child[<span class="number">52</span>]; <span class="comment">// 前26个存放小写，后26个存放大写</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initNode</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i++) &#123;</div><div class="line">child[i] = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line">scount = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeBuild</span><span class="params">(Trienode * head, FILE *fp)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeTraversal</span><span class="params">(Trienode * node, <span class="keyword">char</span> * words, <span class="keyword">int</span> len)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeDestroy</span><span class="params">(Trienode * node)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">FILE * fp = fopen(<span class="string">"org.dat"</span>, <span class="string">"r"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> words[<span class="number">20</span>];</div><div class="line">Trienode * head= (Trienode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Trienode));</div><div class="line">head-&gt;initNode();</div><div class="line">treeBuild(head, fp);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i++) &#123;</div><div class="line">treeTraversal(head-&gt;child[i], words, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">treeDestroy(head);</div><div class="line"></div><div class="line">fclose(fp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeBuild</span><span class="params">(Trienode * head, FILE *fp)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> temp[<span class="number">20</span>];</div><div class="line">Trienode * t;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, temp) != EOF) &#123;</div><div class="line">t = head;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">char</span> word[<span class="number">20</span>];</div><div class="line"><span class="built_in">strcpy</span>(word, temp);</div><div class="line">_strlwr(temp);</div><div class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(temp, <span class="string">"the"</span>) != <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">while</span> (word[i] != <span class="string">'\0'</span>) &#123;</div><div class="line"><span class="keyword">if</span> (word[i] &gt;= <span class="string">'a'</span>&amp;&amp; word[i] &lt;= <span class="string">'z'</span>) &#123;</div><div class="line"><span class="keyword">if</span> (t-&gt;child[word[i] - <span class="string">'a'</span>] == <span class="literal">NULL</span>) &#123;</div><div class="line">Trienode * n = (Trienode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Trienode));</div><div class="line">n-&gt;initNode();</div><div class="line">n-&gt;sletter = word[i];</div><div class="line">t-&gt;child[word[i] - <span class="string">'a'</span>] = n;</div><div class="line">t = n;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">t = t-&gt;child[word[i] - <span class="string">'a'</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (t-&gt;child[word[i] - <span class="string">'A'</span> + <span class="number">26</span>] == <span class="literal">NULL</span>) &#123;</div><div class="line">Trienode * n = (Trienode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Trienode));</div><div class="line">n-&gt;initNode();</div><div class="line">n-&gt;sletter = word[i];</div><div class="line">t-&gt;child[word[i] - <span class="string">'A'</span> +<span class="number">26</span>] = n;</div><div class="line">t = n;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">t = t-&gt;child[word[i] - <span class="string">'A'</span> + <span class="number">26</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">t-&gt;scount++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeTraversal</span><span class="params">(Trienode * node, <span class="keyword">char</span> * words, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">words[len] = node-&gt;sletter;</div><div class="line"><span class="keyword">if</span> (node-&gt;scount &gt; <span class="number">0</span>) &#123;</div><div class="line">words[len + <span class="number">1</span>] = <span class="string">'\0'</span>;</div><div class="line"><span class="keyword">char</span> temp[<span class="number">20</span>];</div><div class="line"><span class="built_in">strcpy</span>(temp, words);</div><div class="line">_strlwr(temp);</div><div class="line">temp[<span class="number">0</span>] = temp[<span class="number">0</span>] + <span class="string">'A'</span> - <span class="string">'a'</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, temp);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i++) &#123;</div><div class="line"><span class="keyword">if</span> (node-&gt;child[i] != <span class="literal">NULL</span>) &#123;</div><div class="line">treeTraversal(node-&gt;child[i], words, len + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">words[len] = <span class="string">'\0'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//  删除树</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeDestroy</span><span class="params">(Trienode * node)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i++) &#123;</div><div class="line">treeDestroy(node-&gt;child[i]);</div><div class="line">&#125;</div><div class="line"><span class="built_in">free</span>(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2008年上机复试题&quot;&gt;&lt;a href=&quot;#2008年上机复试题&quot; class=&quot;headerlink&quot; title=&quot;2008年上机复试题&quot;&gt;&lt;/a&gt;2008年上机复试题&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="保研" scheme="http://115.159.44.202/categories/%E4%BF%9D%E7%A0%94/"/>
    
    
      <category term="C语言" scheme="http://115.159.44.202/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>2005-2007上机复试题</title>
    <link href="http://115.159.44.202/2017/09/08/%E4%BF%9D%E7%A0%94/2005-2007%E4%B8%8A%E6%9C%BA%E5%A4%8D%E8%AF%95%E9%A2%98/"/>
    <id>http://115.159.44.202/2017/09/08/保研/2005-2007上机复试题/</id>
    <published>2017-09-08T11:56:29.000Z</published>
    <updated>2017-09-11T01:50:56.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2005年上机题"><a href="#2005年上机题" class="headerlink" title="2005年上机题"></a>2005年上机题</h2><h3 id="题目一：把一个数表示成若干个素数的和"><a href="#题目一：把一个数表示成若干个素数的和" class="headerlink" title="题目一：把一个数表示成若干个素数的和"></a>题目一：把一个数表示成若干个素数的和</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">divideNum</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">divideNum(<span class="number">201</span>);</div><div class="line">system(<span class="string">"pause"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>((<span class="keyword">double</span>)(n)); i++) &#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> == n%i) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">divideNum</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (isPrime(n)) &#123;</div><div class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"n=%d"</span>, n);</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"+%d"</span>, n);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">2</span>; i--) &#123;</div><div class="line"><span class="keyword">if</span> (isPrime(i)) &#123;</div><div class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d=%d"</span>, n, i);</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"+%d"</span>, i);</div><div class="line">&#125;</div><div class="line">divideNum(n - i);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="题目二：统计篇文章中各英文字母的个数，并排序"><a href="#题目二：统计篇文章中各英文字母的个数，并排序" class="headerlink" title="题目二：统计篇文章中各英文字母的个数，并排序"></a>题目二：统计篇文章中各英文字母的个数，并排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Character</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">char</span> c;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">FILE *f1 = fopen(<span class="string">"D:\\test.txt"</span>, <span class="string">"r"</span>);</div><div class="line"><span class="keyword">if</span> (f1 == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Character c[<span class="number">26</span>];</div><div class="line"><span class="keyword">int</span> max;</div><div class="line">Character temp;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</div><div class="line">c[i].c = i + <span class="string">'a'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">char</span> a;</div><div class="line"><span class="keyword">while</span> ((a = getc(f1)) != EOF) &#123;</div><div class="line"><span class="keyword">if</span> (a &gt;= <span class="string">'a'</span> &amp;&amp; a &lt;= <span class="string">'z'</span>) &#123;</div><div class="line">c[a - <span class="string">'a'</span>].count++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (a &gt;= <span class="string">'A'</span> &amp;&amp; a &lt;= <span class="string">'Z'</span>) &#123;</div><div class="line">c[a - <span class="string">'A'</span>].count++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</div><div class="line">max = i;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">26</span>; j++) &#123;</div><div class="line"><span class="keyword">if</span> (c[max].count &lt; c[j].count)</div><div class="line">max = j;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (max != i) &#123;</div><div class="line">temp.c = c[max].c;</div><div class="line">temp.count = c[max].count;</div><div class="line">c[max].c = c[i].c;</div><div class="line">c[max].count = c[i].count;</div><div class="line">c[i].c = temp.c;</div><div class="line">c[i].count = temp.count;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c: %d\n"</span>, c[i].c, c[i].count);</div><div class="line">&#125;</div><div class="line">   fclose(f1);</div><div class="line">system(<span class="string">"pause"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2006年上机题"><a href="#2006年上机题" class="headerlink" title="2006年上机题"></a>2006年上机题</h2><h3 id="题目一：找出100到1000内的不含9的素数，存到result文件中。"><a href="#题目一：找出100到1000内的不含9的素数，存到result文件中。" class="headerlink" title="题目一：找出100到1000内的不含9的素数，存到result文件中。"></a>题目一：找出100到1000内的不含9的素数，存到result文件中。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">haveNine</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">FILE * fp = fopen(<span class="string">"result.txt"</span>, <span class="string">"w"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">1001</span>; i++) &#123;</div><div class="line"><span class="keyword">if</span> (isPrime(i) &amp;&amp; !haveNine(i)) &#123;</div><div class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%d\n"</span>, i);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">fclose(fp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="built_in">sqrt</span>((<span class="keyword">double</span>)(n))+<span class="number">1</span>; i++) &#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> == n%i) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">haveNine</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">9</span> == n % <span class="number">10</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">n = n / <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2007年上机题"><a href="#2007年上机题" class="headerlink" title="2007年上机题"></a>2007年上机题</h2><h3 id="题目一：把10到1000之间满足以下两个条件的数，存到result-txt文件中"><a href="#题目一：把10到1000之间满足以下两个条件的数，存到result-txt文件中" class="headerlink" title="题目一：把10到1000之间满足以下两个条件的数，存到result.txt文件中"></a>题目一：把10到1000之间满足以下两个条件的数，存到result.txt文件中</h3><h3 id="1-是素数。"><a href="#1-是素数。" class="headerlink" title="(1)是素数。"></a>(1)是素数。</h3><h3 id="2-它的反数也是素数，如：123的反数是321。"><a href="#2-它的反数也是素数，如：123的反数是321。" class="headerlink" title="(2)它的反数也是素数，如：123的反数是321。"></a>(2)它的反数也是素数，如：123的反数是321。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">FILE *fp = fopen(<span class="string">"result.txt"</span>, <span class="string">"w"</span>);</div><div class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"FILE OPEN ERROR!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">1001</span>; i++) &#123;</div><div class="line"><span class="keyword">if</span> (isPrime(i) &amp;&amp; isPrime(reverse(i))) &#123;</div><div class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%d\n"</span>, i);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">   fclose(fp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; (<span class="built_in">sqrt</span>((<span class="keyword">double</span>)(n)) + <span class="number">1</span>); i++) &#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> == n%i) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</div><div class="line">m = m * <span class="number">10</span> + n % <span class="number">10</span>;</div><div class="line">n = n / <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> m;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2005年上机题&quot;&gt;&lt;a href=&quot;#2005年上机题&quot; class=&quot;headerlink&quot; title=&quot;2005年上机题&quot;&gt;&lt;/a&gt;2005年上机题&lt;/h2&gt;&lt;h3 id=&quot;题目一：把一个数表示成若干个素数的和&quot;&gt;&lt;a href=&quot;#题目一：把一个数表示成
      
    
    </summary>
    
      <category term="保研" scheme="http://115.159.44.202/categories/%E4%BF%9D%E7%A0%94/"/>
    
    
      <category term="C语言" scheme="http://115.159.44.202/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>道别</title>
    <link href="http://115.159.44.202/2017/07/23/%E9%9A%8F%E8%AE%B0/%E9%81%93%E5%88%AB/"/>
    <id>http://115.159.44.202/2017/07/23/随记/道别/</id>
    <published>2017-07-23T12:16:29.000Z</published>
    <updated>2017-09-22T10:05:25.833Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;我常常会想起和很多人初见的时候，也常常梦见很多新的初见的时刻，但是对很多人，我往往很难想起我们是在哪一刻离开，也许就是渐渐地变成了陌生人。慢慢地，过去种种，似水无痕。<br>&emsp;&emsp;这让我有的时候有些遗憾，对于要离开的人，没有好好地道个别。有的时候只是匆匆忙忙收拾好了行李，走出了宿舍，或是下了车，挥手说一句：“拜”。有些人只是在某次见面后说了一句：“我先走了。”然后就再也没有见过。<br>&emsp;&emsp;突然想到这些是因为今天有个已经毕业的朋友突然给我来了一条消息：“我是来道别的。”早先时候他和我说过，在到了一个新的地方，会删除所有过去的一般朋友的联系方式。我有些诧异，但仍然认认真真与他道了别，祝他以后一切都好，然后看到他消失在我的联系人列表里。我无法评价这个习惯是好或是不好。我只能模模糊糊觉得大概就是从这一刻起，我们就清清楚楚地没有联系了。<br>&emsp;&emsp;但是要问我是否会这么做？我的答案大概是否定的。大概是中国人本性的委婉，让我宁愿自己逐渐淡出别人的生活。比起让我说“道别”二字，大概我只能说一句：“我会想你的。”<br>&emsp;&emsp;最后仍然祝他一切都好吧，也希望那些过去的人也一切都好。</p><p>&emsp;&emsp;最后一次更新：某天突然又关注了微博，又开始说奇怪的话。这样子，再看以前就有点可笑了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;我常常会想起和很多人初见的时候，也常常梦见很多新的初见的时刻，但是对很多人，我往往很难想起我们是在哪一刻离开，也许就是渐渐地变成了陌生人。慢慢地，过去种种，似水无痕。&lt;br&gt;&amp;emsp;&amp;emsp;这让我有的时候有些遗憾，对于要离开的人，没有好好地道
      
    
    </summary>
    
      <category term="随记" scheme="http://115.159.44.202/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="随记" scheme="http://115.159.44.202/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>shell常用命令汇总</title>
    <link href="http://115.159.44.202/2017/06/22/shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <id>http://115.159.44.202/2017/06/22/shell常用命令汇总/</id>
    <published>2017-06-22T08:23:29.000Z</published>
    <updated>2017-06-22T03:07:20.137Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;其实最开始我也是没有打算写这篇博客的，毕竟网上的相关文档很多，而且对于每个命令我也不打算详细讲，但是期末考要到了，对于命令不熟的我能怎么办啊……我也很绝望啊……</p><h2 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h2><table><thead><tr><th>命令</th><th>用法</th></tr></thead><tbody><tr><td>who</td><td>列出所有正在使用系统的用户、所用终端名和注册到系统的时间</td></tr><tr><td>echo</td><td>将命令行中的参数显示到标准输出上</td></tr><tr><td>date</td><td>显示或设置系统的日期和时间</td></tr><tr><td>cal</td><td>显示公元1~9999年中任何一年或一个月的日历</td></tr><tr><td>clear</td><td>清除屏幕上的信息</td></tr><tr><td>passwd</td><td>和用户口令相关</td></tr></tbody></table><h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><table><thead><tr><th>命令</th><th>用法</th></tr></thead><tbody><tr><td>cat</td><td>连接文件并打印到标准输出设备上</td></tr><tr><td>more</td><td>显示文件内容，每次显示一屏</td></tr><tr><td>less</td><td>分屏显示文件内容</td></tr><tr><td>head</td><td>显示指定文件的开头若干行</td></tr><tr><td>tail</td><td>显示指定文件末尾若干行</td></tr><tr><td>touch</td><td>修改指定文件的时间标签或者创建一个空文件</td></tr><tr><td>grep</td><td>在文件中查找指定模式的词或短语，并输出包括给定字符的所有行</td></tr><tr><td>sort</td><td>对文本文件各行排序</td></tr><tr><td>uniq</td><td>从排好序的文件中去除重复行</td></tr><tr><td>comm</td><td>对两个已经排好序的文件进行比较</td></tr><tr><td>diff</td><td>比较两个文件，并找出它们的不同</td></tr><tr><td>cp</td><td>将源文件或目录复制到目标文件或目录中</td></tr><tr><td>rm</td><td>删除文件和目录</td></tr><tr><td>mv</td><td>对文件或目录重命名，或者将一个文件从一个目录移到另一个目录中</td></tr><tr><td>wc</td><td>统计指定文件的字节数、字数、行数，并显示出来</td></tr><tr><td>mkdir</td><td>创建目录</td></tr><tr><td>rmdir</td><td>删除目录</td></tr><tr><td>cd</td><td>改变工作目录</td></tr><tr><td>pwd</td><td>显示当前工作目录的绝对路径</td></tr><tr><td>ls</td><td>列出指定目录的内容</td></tr><tr><td>ln</td><td>创建链接</td></tr><tr><td>chmod</td><td>改变或设置文件的存取权限</td></tr><tr><td>umask</td><td>设置新建文件权限的掩码</td></tr><tr><td>chgrp</td><td>改变文件或目录所属的用户组</td></tr><tr><td>chown</td><td>改变文件或目录的所有者和所属的组</td></tr></tbody></table><h2 id="联机帮助命令"><a href="#联机帮助命令" class="headerlink" title="联机帮助命令"></a>联机帮助命令</h2><table><thead><tr><th>命令</th><th>用法</th></tr></thead><tbody><tr><td>man</td><td>命令格式化并显示某一命令的联机帮助手册页</td></tr><tr><td>help</td><td>查看所有shell内置命令的帮助信息</td></tr></tbody></table><h2 id="有关进程管理的命令"><a href="#有关进程管理的命令" class="headerlink" title="有关进程管理的命令"></a>有关进程管理的命令</h2><table><thead><tr><th>命令</th><th>用法</th></tr></thead><tbody><tr><td>ps</td><td>查看当前系统中运行的进程信息</td></tr><tr><td>kill</td><td>终止一个进程的运行</td></tr><tr><td>sleep</td><td>使进程暂停一段时间</td></tr></tbody></table><h2 id="文件压缩和解压缩命令"><a href="#文件压缩和解压缩命令" class="headerlink" title="文件压缩和解压缩命令"></a>文件压缩和解压缩命令</h2><table><thead><tr><th>命令</th><th>用法</th></tr></thead><tbody><tr><td>gzip</td><td>对文件进行压缩和解压缩</td></tr><tr><td>uzip</td><td>对zip格式的压缩文件进行解压缩</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>命令</th><th>用法</th></tr></thead><tbody><tr><td>history</td><td>显示命令历史表中的命令</td></tr><tr><td>alias</td><td>定义别名</td></tr><tr><td>unalias</td><td>取消定义的别名</td></tr><tr><td>read</td><td>读取数据</td></tr><tr><td>shift</td><td>将命令行的实参左移一位</td></tr><tr><td>export</td><td>定义一些变量并赋值</td></tr><tr><td>set</td><td></td></tr><tr><td>unset</td></tr></tbody></table><h2 id="作业控制"><a href="#作业控制" class="headerlink" title="作业控制"></a>作业控制</h2><table><thead><tr><th>命令</th><th>用法</th></tr></thead><tbody><tr><td>jobs</td><td>列出当前未完成的作业</td></tr><tr><td>bg</td><td>把前台作业切换成后台作业</td></tr><tr><td>fg</td><td>把后台作业切换成前台作业</td></tr></tbody></table><h2 id="shell内置命令"><a href="#shell内置命令" class="headerlink" title="shell内置命令"></a>shell内置命令</h2><table><thead><tr><th>命令</th><th>用法</th></tr></thead><tbody><tr><td>eval</td><td>进行变量替换，然后执行命令</td></tr><tr><td>exec</td><td>执行命令，但不创建新的进程</td></tr><tr><td>hash</td><td>确定并计组指定的命令在搜索路径中的位置</td></tr><tr><td>readonly</td><td>标记给定的变量是只读的，不能改变其值</td></tr><tr><td>trap</td><td>设定接收到某个信号完成的动作，忽略某个信号的影响，或者恢复该信号产生时系统预设的动作</td></tr><tr><td>type</td><td>显示给定命令是如何被解释的</td></tr><tr><td>unset</td><td>删除指定的相应变量或函数</td></tr><tr><td>wait</td><td>等待指定的进程终止</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;其实最开始我也是没有打算写这篇博客的，毕竟网上的相关文档很多，而且对于每个命令我也不打算详细讲，但是期末考要到了，对于命令不熟的我能怎么办啊……我也很绝望啊……&lt;/p&gt;
&lt;h2 id=&quot;简单命令&quot;&gt;&lt;a href=&quot;#简单命令&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="Linux" scheme="http://115.159.44.202/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://115.159.44.202/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>用jupyter notebook进行hexo博客管理</title>
    <link href="http://115.159.44.202/2017/06/18/%E7%94%A8jupyter%20notebook%E8%BF%9B%E8%A1%8Chexo%E5%8D%9A%E5%AE%A2%E7%AE%A1%E7%90%86/"/>
    <id>http://115.159.44.202/2017/06/18/用jupyter notebook进行hexo博客管理/</id>
    <published>2017-06-18T02:59:29.000Z</published>
    <updated>2017-06-18T04:00:34.620Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;我很久都没有再发博客，很大一部分的原因是我总是很懒得切换系统去发博客，而且我的linux输入法有问题每次都需要重装，这让我觉得很痛苦。前几天丁丁给我安利了jupyter notebook，我也恰巧想把博客转成一个随记的地方，就配置了试试。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>&emsp;&emsp;我是在服务器上安装jupyter notebook,系统是Linux。这里有一个官方的安装配置的<a href="http://jupyter.org/install.html" target="_blank" rel="noopener">介绍</a>，可以参考下。</p><p>&emsp;&emsp;智障的我一开始以为是本地安装，虽然后面改正了，但是还是被丁丁嘲笑&amp;&amp;嫌弃了。又颠颠地跑去服务器重新配置了下环境，其实就是python和pip，具体的安装命令要是不知道就输入这两个命令，会有提示的。哦，记得要加sudo，我为此还辛辛苦苦找了半天的错 ಥ_ಥ。</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>&emsp;&emsp;在安装好pip之后就可以试用一下命令安装jupyter notebook了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install jupyter</div></pre></td></tr></table></figure></p><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><p>&emsp;&emsp;官方说法是输入以下命令就可以打开一个jupyter notebook的网页了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jupyter notebook</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;但是我是服务器啊，还是个没有浏览器的服务器，即使我手动输入网址，也是没有办法访问，所以这时候就需要对jupyter notebook做一些配置，这个过程我参考了丁丁的<a href="https://blog.mythsman.com/2016/03/06/1/" target="_blank" rel="noopener">博客</a>。</p><p>&emsp;&emsp;首先是密码部分，你肯定不希望谁都能通过这个端口访问你的文件，苏偶一这时候我们就需要一个密码。按照他博客上说的方法也是可行的，但是jupyter notebook自己就带了可以修改密码的命令，然后输入密码就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jupyter notebook passwd</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;在一开始的时候是在找不到jupyter notebook的.config文件的，需要用下面的命令生成一个这样的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jupyter notebook --generate-config</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;然后就可以通过这个命令对配置进行修改了，在文件中去掉一些注释，然后修改赋值，具体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">c.NotebookApp.ip = &apos;*&apos;</div><div class="line">c.NotebookApp.open_browser = False</div><div class="line">c.NotebookApp.port = 8888</div></pre></td></tr></table></figure></p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>&emsp;&emsp;做完以上的这些事情我就可以访问我的jupyter notebook了，但是在访问的过程中存在一个问题，就是对于.md结尾的文件，点击文件名永远是view的界面，但对于txt的文件，就直接是edit的界面。而且对于所有的中文名的文件，点击edit都是无法编辑，显示404错误，但是可以通过将view的界面手动改成edit来修改文件。对于英文名称的文件都是可以编辑的。这个我也很忧桑，丁丁也帮我挣扎了一会儿，无果。要看到这篇博客的各位恰巧知道解决方法的话，拜托联系我下，谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;我很久都没有再发博客，很大一部分的原因是我总是很懒得切换系统去发博客，而且我的linux输入法有问题每次都需要重装，这让我觉得很痛苦。前几天丁丁给我安利了jupyter notebook，我也恰巧想把博客转成一个随记的地方，就配置了试试。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="环境配置" scheme="http://115.159.44.202/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="jupyter" scheme="http://115.159.44.202/tags/jupyter/"/>
    
      <category term="环境配置" scheme="http://115.159.44.202/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="python" scheme="http://115.159.44.202/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Gradient Descent（梯度下降）</title>
    <link href="http://115.159.44.202/2017/05/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Gradient%20Descent/"/>
    <id>http://115.159.44.202/2017/05/09/机器学习/Gradient Descent/</id>
    <published>2017-05-09T08:23:29.000Z</published>
    <updated>2017-06-18T04:04:53.896Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这段时间不是很忙，也看到Andrew Ng在Coursera上的machine learning开课了，就顺带着看看。第一周和第二周讲的都是比较简单的问题，主要就是介绍了Cost Function以及最小化的几个方法。我这里要说的就是其中的一种：Gradient desxcent（梯度下降）。<br>&emsp;&emsp;梯度下降这个概念对很多人来说都不是很熟悉了，我之前看过关于HOG(方向梯度直方图)的一篇论文，再看梯度下降就有种熟悉感。</p><h2 id="梯度下降的思想"><a href="#梯度下降的思想" class="headerlink" title="梯度下降的思想"></a>梯度下降的思想</h2><p>&emsp;&emsp;在介绍梯度下降之前我们先引入一个Cost function（代价函数）：<br>$$J(\theta_0,\theta_1,…,\theta_n)=\frac{1}{2m}\sum_{i=1}^{m}(h(x^i)-y^i)^2$$<br>&emsp;&emsp;$\theta_t$是$x^t$对应的系数，$m$是样本总数，其中$h(x^i)$是第$i$个变量预测的结果，计算公式定义如下：<br>$$h(x^i)=\theta_0+\theta_1x_1+…+\theta_nx_n$$<br>&emsp;&emsp;我们的目的就是最小化$J(\theta_0,\theta_1,…,\theta_n)$的值，这是一个有关于$\theta_0,\theta_1,…,\theta_n$的函数。这也是梯度下降想要求得的目标。<br>&emsp;&emsp;假想我们站在一个山上（当然根据这个题目，这个山可能是多维的，但是不管），我们想要到达海拔最高的地，所以我们的选择是像更矮的地方迈出一步，然后一步一步走到最低点。这也就是梯度下降的思想，根据一定的策略减少$J$的值，然后达到最低点。因为$J(\theta_0,\theta_1,…,\theta_n)$是和$\theta_0,\theta_1,…,\theta_n$有关的函数，所以我们可以通过修改$\theta_0,\theta_1,…,\theta_n$的值来修改$J(\theta_0,\theta_1,…,\theta_n)$的大小。我们以前常用的一种方法就是通过求导来得到最小值所在的位置，梯度下降也是通过求导来逐步修改$\theta_0,\theta_1,…,\theta_n$的值。具体公式如下：<br>$$$$\begin{matrix}<br>\left{<br>\begin{aligned}<br>\theta_0:=\theta_0-\alpha\frac{1}{2m}\sum_{i=1}^{m}(h(x^i)-y^i)\<br>\theta_n:=\theta_n-\alpha\frac{1}{2m}\sum_{i=1}^{m}(h(x^i)-y^i)x^i_n\<br>\end{aligned}<br>\right.<br>\end{matrix}$$$$<br>&emsp;&emsp;其中$\alpha$是学习效率，即我们每次的步子究竟是要迈多大。太小了就会走的很慢，太大了容易一步迈过了最小值，可能离最小值越来越远。通常，我们函数在越靠近最小值时下降越平缓，所以没有必要手动的修改（可以设置为$…0.001,…,0.01,…,0.1,…,1…$）。所以我们每次迭代就是根据不同的$\theta$来计算，再根据不同的计算结果修改$\theta$，至于迭代结束的条件，可以设置两次大小相差不超过$10^{-3}$，或者预先设置好迭代次数。<br>&emsp;&emsp;但是这也带来了一个问题，因为我们身在山中，只知道这个点是我们目前走到的局部最低点，而并不知道是不是想要的全局海拔最低的地方，所以相对应的，梯度下降也是只能得到局部最小值，而不能得到全局最小值。</p><h2 id="matlab代码"><a href="#matlab代码" class="headerlink" title="matlab代码"></a>matlab代码</h2><p>&emsp;&emsp;虽然作业分了单个变量和多个变量，但是因为是用Matlab进行矩阵运算，所以写起来没有多大差别。</p><h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[theta, J_history]</span> = <span class="title">gradientDescent</span><span class="params">(X, y, theta, alpha, num_iters)</span></span></div><div class="line"><span class="comment">%GRADIENTDESCENT Performs gradient descent to learn theta</span></div><div class="line"><span class="comment">%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by </span></div><div class="line"><span class="comment">%   taking num_iters gradient steps with learning rate alpha</span></div><div class="line"></div><div class="line"><span class="comment">% Initialize some useful values</span></div><div class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></div><div class="line">J_history = <span class="built_in">zeros</span>(num_iters, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> iter = <span class="number">1</span>:num_iters</div><div class="line"></div><div class="line">    <span class="comment">% ====================== YOUR CODE HERE ======================</span></div><div class="line">    <span class="comment">% Instructions: Perform a single gradient step on the parameter vector</span></div><div class="line">    <span class="comment">%               theta. </span></div><div class="line">    <span class="comment">%</span></div><div class="line">    <span class="comment">% Hint: While debugging, it can be useful to print out the values</span></div><div class="line">    <span class="comment">%       of the cost function (computeCost) and gradient here.</span></div><div class="line">    <span class="comment">%</span></div><div class="line">    h=X*theta;</div><div class="line">    theta=theta-alpha/m*((h-y)'*X)';</div><div class="line"></div><div class="line">    <span class="comment">% ============================================================</span></div><div class="line"></div><div class="line">    <span class="comment">% Save the cost J in every iteration    </span></div><div class="line">    J_history(iter) = computeCost(X, y, theta);</div><div class="line"></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><h3 id="计算代价函数"><a href="#计算代价函数" class="headerlink" title="计算代价函数"></a>计算代价函数</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">J</span> = <span class="title">computeCost</span><span class="params">(X, y, theta)</span></span></div><div class="line"><span class="comment">%COMPUTECOST Compute cost for linear regression</span></div><div class="line"><span class="comment">%   J = COMPUTECOST(X, y, theta) computes the cost of using theta as the</span></div><div class="line"><span class="comment">%   parameter for linear regression to fit the data points in X and y</span></div><div class="line"></div><div class="line"><span class="comment">% Initialize some useful values</span></div><div class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></div><div class="line"></div><div class="line"><span class="comment">% You need to return the following variables correctly </span></div><div class="line">J = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">% ====================== YOUR CODE HERE ======================</span></div><div class="line"><span class="comment">% Instructions: Compute the cost of a particular choice of theta</span></div><div class="line"><span class="comment">%               You should set J to the cost.</span></div><div class="line">h=X*theta;</div><div class="line">J=<span class="number">1</span>/<span class="number">2</span>/m*(h-y)'*(h-y);</div><div class="line"></div><div class="line"><span class="comment">% =========================================================================</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><h3 id="特征一般化"><a href="#特征一般化" class="headerlink" title="特征一般化"></a>特征一般化</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[X_norm, mu, sigma]</span> = <span class="title">featureNormalize</span><span class="params">(X)</span></span></div><div class="line"><span class="comment">%FEATURENORMALIZE Normalizes the features in X </span></div><div class="line"><span class="comment">%   FEATURENORMALIZE(X) returns a normalized version of X where</span></div><div class="line"><span class="comment">%   the mean value of each feature is 0 and the standard deviation</span></div><div class="line"><span class="comment">%   is 1. This is often a good preprocessing step to do when</span></div><div class="line"><span class="comment">%   working with learning algorithms.</span></div><div class="line"></div><div class="line"><span class="comment">% You need to set these values correctly</span></div><div class="line">X_norm = X;</div><div class="line"></div><div class="line"><span class="comment">% ====================== YOUR CODE HERE ======================</span></div><div class="line"><span class="comment">% Instructions: First, for each feature dimension, compute the mean</span></div><div class="line"><span class="comment">%               of the feature and subtract it from the dataset,</span></div><div class="line"><span class="comment">%               storing the mean value in mu. Next, compute the </span></div><div class="line"><span class="comment">%               standard deviation of each feature and divide</span></div><div class="line"><span class="comment">%               each feature by it's standard deviation, storing</span></div><div class="line"><span class="comment">%               the standard deviation in sigma. </span></div><div class="line"><span class="comment">%</span></div><div class="line"><span class="comment">%               Note that X is a matrix where each column is a </span></div><div class="line"><span class="comment">%               feature and each row is an example. You need </span></div><div class="line"><span class="comment">%               to perform the normalization separately for </span></div><div class="line"><span class="comment">%               each feature. </span></div><div class="line"><span class="comment">%</span></div><div class="line"><span class="comment">% Hint: You might find the 'mean' and 'std' functions useful.</span></div><div class="line"><span class="comment">%       </span></div><div class="line"></div><div class="line">mun=mean(X);</div><div class="line">sigma=std(X);</div><div class="line">[m,~]=<span class="built_in">size</span>(X);</div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:m</div><div class="line">    X_norm(<span class="built_in">i</span>,:)=(X(<span class="built_in">i</span>,:)-mun)./sigma;</div><div class="line"><span class="keyword">end</span></div><div class="line">mu=mun;</div><div class="line"><span class="comment">% ============================================================</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>&emsp;&emsp;作业及代码放在<a href="https://github.com/Mikitok/Machine-Learning/tree/master/machine-learning-ex1" target="_blank" rel="noopener">github</a>了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;这段时间不是很忙，也看到Andrew Ng在Coursera上的machine learning开课了，就顺带着看看。第一周和第二周讲的都是比较简单的问题，主要就是介绍了Cost Function以及最小化的几个方法。我这里要说的就是其中的一种：Gr
      
    
    </summary>
    
      <category term="机器学习" scheme="http://115.159.44.202/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="matlab" scheme="http://115.159.44.202/tags/matlab/"/>
    
      <category term="机器学习" scheme="http://115.159.44.202/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
